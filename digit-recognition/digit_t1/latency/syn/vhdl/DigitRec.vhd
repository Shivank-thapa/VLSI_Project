-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DigitRec is
port (
    global_training_set_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    global_training_set_V_ce0 : OUT STD_LOGIC;
    global_training_set_V_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    global_training_set_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
    global_training_set_V_we0 : OUT STD_LOGIC;
    global_training_set_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    global_training_set_V_ce1 : OUT STD_LOGIC;
    global_training_set_V_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
    global_training_set_V_q1 : IN STD_LOGIC_VECTOR (255 downto 0);
    global_training_set_V_we1 : OUT STD_LOGIC;
    global_test_set_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    global_test_set_V_ce0 : OUT STD_LOGIC;
    global_test_set_V_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    global_test_set_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
    global_test_set_V_we0 : OUT STD_LOGIC;
    global_test_set_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    global_test_set_V_ce1 : OUT STD_LOGIC;
    global_test_set_V_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
    global_test_set_V_q1 : IN STD_LOGIC_VECTOR (255 downto 0);
    global_test_set_V_we1 : OUT STD_LOGIC;
    global_results_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    global_results_ce0 : OUT STD_LOGIC;
    global_results_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    global_results_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    global_results_we0 : OUT STD_LOGIC;
    global_results_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    global_results_ce1 : OUT STD_LOGIC;
    global_results_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    global_results_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    global_results_we1 : OUT STD_LOGIC;
    num_training : IN STD_LOGIC_VECTOR (31 downto 0);
    num_test : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of DigitRec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DigitRec,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku5p-ffvb676-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.663100,HLS_SYN_LAT=18083007,HLS_SYN_TPT=18064002,HLS_SYN_MEM=320,HLS_SYN_DSP=4,HLS_SYN_FF=9412,HLS_SYN_LUT=12776,HLS_VERSION=2019_1}";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal DigitRec_entry3_U0_ap_start : STD_LOGIC;
    signal DigitRec_entry3_U0_ap_done : STD_LOGIC;
    signal DigitRec_entry3_U0_ap_continue : STD_LOGIC;
    signal DigitRec_entry3_U0_ap_idle : STD_LOGIC;
    signal DigitRec_entry3_U0_ap_ready : STD_LOGIC;
    signal DigitRec_entry3_U0_start_out : STD_LOGIC;
    signal DigitRec_entry3_U0_start_write : STD_LOGIC;
    signal DigitRec_entry3_U0_num_training_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DigitRec_entry3_U0_num_training_out_write : STD_LOGIC;
    signal DigitRec_entry3_U0_num_test_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DigitRec_entry3_U0_num_test_out_write : STD_LOGIC;
    signal DigitRec_entry28_U0_ap_start : STD_LOGIC;
    signal DigitRec_entry28_U0_ap_done : STD_LOGIC;
    signal DigitRec_entry28_U0_ap_continue : STD_LOGIC;
    signal DigitRec_entry28_U0_ap_idle : STD_LOGIC;
    signal DigitRec_entry28_U0_ap_ready : STD_LOGIC;
    signal DigitRec_entry28_U0_num_training_read : STD_LOGIC;
    signal DigitRec_entry28_U0_num_test_read : STD_LOGIC;
    signal DigitRec_entry28_U0_num_training_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DigitRec_entry28_U0_num_training_out_write : STD_LOGIC;
    signal DigitRec_entry28_U0_num_test_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DigitRec_entry28_U0_num_test_out_write : STD_LOGIC;
    signal DigitRec_entry28_U0_num_test_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DigitRec_entry28_U0_num_test_out1_write : STD_LOGIC;
    signal Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_global_training_set_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal Loop_1_proc_U0_global_training_set_V_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_0_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_0_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_0_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_1_proc_U0_training_set_V_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_1_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_1_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_1_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_1_proc_U0_training_set_V_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_2_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_2_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_2_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_1_proc_U0_training_set_V_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_3_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_3_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_3_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_1_proc_U0_training_set_V_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_4_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_4_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_4_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_1_proc_U0_training_set_V_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_5_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_5_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_5_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_1_proc_U0_training_set_V_6_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_6_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_6_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_6_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_1_proc_U0_training_set_V_7_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_7_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_7_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_7_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_1_proc_U0_training_set_V_8_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_8_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_8_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_8_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_1_proc_U0_training_set_V_9_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_1_proc_U0_training_set_V_9_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_9_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_9_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_channel_done_training_set_V_9 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_9_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_9 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_9 : STD_LOGIC;
    signal ap_channel_done_training_set_V_8 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_8_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_8 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_8 : STD_LOGIC;
    signal ap_channel_done_training_set_V_7 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_7 : STD_LOGIC;
    signal ap_channel_done_training_set_V_6 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_6 : STD_LOGIC;
    signal ap_channel_done_training_set_V_5 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_5 : STD_LOGIC;
    signal ap_channel_done_training_set_V_4 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_4 : STD_LOGIC;
    signal ap_channel_done_training_set_V_3 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_3 : STD_LOGIC;
    signal ap_channel_done_training_set_V_2 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_2 : STD_LOGIC;
    signal ap_channel_done_training_set_V_1 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_1 : STD_LOGIC;
    signal ap_channel_done_training_set_V_0 : STD_LOGIC;
    signal Loop_1_proc_U0_training_set_V_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_training_set_V_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_training_set_V_0 : STD_LOGIC;
    signal Loop_2_proc_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc_U0_num_test_read : STD_LOGIC;
    signal Loop_2_proc_U0_global_test_set_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_2_proc_U0_global_test_set_V_ce0 : STD_LOGIC;
    signal Loop_2_proc_U0_test_set_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal Loop_2_proc_U0_test_set_V_write : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_ap_start : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_ap_done : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_ap_continue : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_ap_idle : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_ap_ready : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_num_training_read : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_num_test_read : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_num_test_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_num_test_out_write : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_results_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_results_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_results_we0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_results_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_0_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_1_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_2_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_3_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_4_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_5_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_6_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_6_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_7_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_7_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_8_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_8_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_9_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_TEST_LOOP_proc2_U0_training_set_V_9_ce0 : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_test_set_V_read : STD_LOGIC;
    signal ap_channel_done_results : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_results_full_n : STD_LOGIC;
    signal Loop_4_proc_U0_ap_start : STD_LOGIC;
    signal Loop_4_proc_U0_ap_done : STD_LOGIC;
    signal Loop_4_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_4_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_4_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_4_proc_U0_num_test_read : STD_LOGIC;
    signal Loop_4_proc_U0_global_results_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_4_proc_U0_global_results_ce0 : STD_LOGIC;
    signal Loop_4_proc_U0_global_results_we0 : STD_LOGIC;
    signal Loop_4_proc_U0_global_results_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_4_proc_U0_results_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Loop_4_proc_U0_results_ce0 : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal training_set_V_0_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_0_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_0_i_full_n : STD_LOGIC;
    signal training_set_V_0_t_empty_n : STD_LOGIC;
    signal training_set_V_1_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_1_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_1_i_full_n : STD_LOGIC;
    signal training_set_V_1_t_empty_n : STD_LOGIC;
    signal training_set_V_2_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_2_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_2_i_full_n : STD_LOGIC;
    signal training_set_V_2_t_empty_n : STD_LOGIC;
    signal training_set_V_3_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_3_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_3_i_full_n : STD_LOGIC;
    signal training_set_V_3_t_empty_n : STD_LOGIC;
    signal training_set_V_4_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_4_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_4_i_full_n : STD_LOGIC;
    signal training_set_V_4_t_empty_n : STD_LOGIC;
    signal training_set_V_5_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_5_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_5_i_full_n : STD_LOGIC;
    signal training_set_V_5_t_empty_n : STD_LOGIC;
    signal training_set_V_6_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_6_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_6_i_full_n : STD_LOGIC;
    signal training_set_V_6_t_empty_n : STD_LOGIC;
    signal training_set_V_7_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_7_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_7_i_full_n : STD_LOGIC;
    signal training_set_V_7_t_empty_n : STD_LOGIC;
    signal training_set_V_8_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_8_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_8_i_full_n : STD_LOGIC;
    signal training_set_V_8_t_empty_n : STD_LOGIC;
    signal training_set_V_9_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_9_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal training_set_V_9_i_full_n : STD_LOGIC;
    signal training_set_V_9_t_empty_n : STD_LOGIC;
    signal results_i_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal results_t_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal results_i_full_n : STD_LOGIC;
    signal results_t_empty_n : STD_LOGIC;
    signal num_training_c1_full_n : STD_LOGIC;
    signal num_training_c1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_training_c1_empty_n : STD_LOGIC;
    signal num_test_c2_full_n : STD_LOGIC;
    signal num_test_c2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_test_c2_empty_n : STD_LOGIC;
    signal num_training_c_full_n : STD_LOGIC;
    signal num_training_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_training_c_empty_n : STD_LOGIC;
    signal num_test_c_full_n : STD_LOGIC;
    signal num_test_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_test_c_empty_n : STD_LOGIC;
    signal num_test_c1108_full_n : STD_LOGIC;
    signal num_test_c1108_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_test_c1108_empty_n : STD_LOGIC;
    signal test_set_V_full_n : STD_LOGIC;
    signal test_set_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal test_set_V_empty_n : STD_LOGIC;
    signal num_test_c1109_full_n : STD_LOGIC;
    signal num_test_c1109_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_test_c1109_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_DigitRec_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_DigitRec_entry3_U0_ap_ready : STD_LOGIC;
    signal DigitRec_entry3_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_2_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_DigitRec_entry28_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_DigitRec_entry28_U0_full_n : STD_LOGIC;
    signal start_for_DigitRec_entry28_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_DigitRec_entry28_U0_empty_n : STD_LOGIC;
    signal DigitRec_entry28_U0_start_full_n : STD_LOGIC;
    signal DigitRec_entry28_U0_start_write : STD_LOGIC;
    signal Loop_1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc_U0_start_write : STD_LOGIC;
    signal Loop_2_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_2_proc_U0_start_write : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_start_full_n : STD_LOGIC;
    signal Loop_TEST_LOOP_proc2_U0_start_write : STD_LOGIC;
    signal Loop_4_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_4_proc_U0_start_write : STD_LOGIC;

    component DigitRec_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        num_training : IN STD_LOGIC_VECTOR (31 downto 0);
        num_test : IN STD_LOGIC_VECTOR (31 downto 0);
        num_training_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_training_out_full_n : IN STD_LOGIC;
        num_training_out_write : OUT STD_LOGIC;
        num_test_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_test_out_full_n : IN STD_LOGIC;
        num_test_out_write : OUT STD_LOGIC );
    end component;


    component DigitRec_entry28 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        num_training_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        num_training_empty_n : IN STD_LOGIC;
        num_training_read : OUT STD_LOGIC;
        num_test_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        num_test_empty_n : IN STD_LOGIC;
        num_test_read : OUT STD_LOGIC;
        num_training_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_training_out_full_n : IN STD_LOGIC;
        num_training_out_write : OUT STD_LOGIC;
        num_test_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_test_out_full_n : IN STD_LOGIC;
        num_test_out_write : OUT STD_LOGIC;
        num_test_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_test_out1_full_n : IN STD_LOGIC;
        num_test_out1_write : OUT STD_LOGIC );
    end component;


    component Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        global_training_set_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        global_training_set_V_ce0 : OUT STD_LOGIC;
        global_training_set_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_0_ce0 : OUT STD_LOGIC;
        training_set_V_0_we0 : OUT STD_LOGIC;
        training_set_V_0_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_1_ce0 : OUT STD_LOGIC;
        training_set_V_1_we0 : OUT STD_LOGIC;
        training_set_V_1_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_2_ce0 : OUT STD_LOGIC;
        training_set_V_2_we0 : OUT STD_LOGIC;
        training_set_V_2_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_3_ce0 : OUT STD_LOGIC;
        training_set_V_3_we0 : OUT STD_LOGIC;
        training_set_V_3_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_4_ce0 : OUT STD_LOGIC;
        training_set_V_4_we0 : OUT STD_LOGIC;
        training_set_V_4_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_5_ce0 : OUT STD_LOGIC;
        training_set_V_5_we0 : OUT STD_LOGIC;
        training_set_V_5_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_6_ce0 : OUT STD_LOGIC;
        training_set_V_6_we0 : OUT STD_LOGIC;
        training_set_V_6_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_7_ce0 : OUT STD_LOGIC;
        training_set_V_7_we0 : OUT STD_LOGIC;
        training_set_V_7_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_8_ce0 : OUT STD_LOGIC;
        training_set_V_8_we0 : OUT STD_LOGIC;
        training_set_V_8_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_9_ce0 : OUT STD_LOGIC;
        training_set_V_9_we0 : OUT STD_LOGIC;
        training_set_V_9_d0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component Loop_2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        num_test_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        num_test_empty_n : IN STD_LOGIC;
        num_test_read : OUT STD_LOGIC;
        global_test_set_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        global_test_set_V_ce0 : OUT STD_LOGIC;
        global_test_set_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        test_set_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        test_set_V_full_n : IN STD_LOGIC;
        test_set_V_write : OUT STD_LOGIC );
    end component;


    component Loop_TEST_LOOP_proc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        num_training_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        num_training_empty_n : IN STD_LOGIC;
        num_training_read : OUT STD_LOGIC;
        num_test_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        num_test_empty_n : IN STD_LOGIC;
        num_test_read : OUT STD_LOGIC;
        num_test_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_test_out_full_n : IN STD_LOGIC;
        num_test_out_write : OUT STD_LOGIC;
        results_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        results_ce0 : OUT STD_LOGIC;
        results_we0 : OUT STD_LOGIC;
        results_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        training_set_V_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_0_ce0 : OUT STD_LOGIC;
        training_set_V_0_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_1_ce0 : OUT STD_LOGIC;
        training_set_V_1_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_2_ce0 : OUT STD_LOGIC;
        training_set_V_2_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_3_ce0 : OUT STD_LOGIC;
        training_set_V_3_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_4_ce0 : OUT STD_LOGIC;
        training_set_V_4_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_5_ce0 : OUT STD_LOGIC;
        training_set_V_5_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_6_ce0 : OUT STD_LOGIC;
        training_set_V_6_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_7_ce0 : OUT STD_LOGIC;
        training_set_V_7_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_8_ce0 : OUT STD_LOGIC;
        training_set_V_8_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        training_set_V_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        training_set_V_9_ce0 : OUT STD_LOGIC;
        training_set_V_9_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        test_set_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        test_set_V_empty_n : IN STD_LOGIC;
        test_set_V_read : OUT STD_LOGIC );
    end component;


    component Loop_4_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        num_test_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        num_test_empty_n : IN STD_LOGIC;
        num_test_read : OUT STD_LOGIC;
        global_results_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        global_results_ce0 : OUT STD_LOGIC;
        global_results_we0 : OUT STD_LOGIC;
        global_results_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        results_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        results_ce0 : OUT STD_LOGIC;
        results_q0 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component DigitRec_trainingg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component DigitRec_results IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w256_d2000_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_DigitReqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    DigitRec_entry3_U0 : component DigitRec_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DigitRec_entry3_U0_ap_start,
        start_full_n => start_for_DigitRec_entry28_U0_full_n,
        ap_done => DigitRec_entry3_U0_ap_done,
        ap_continue => DigitRec_entry3_U0_ap_continue,
        ap_idle => DigitRec_entry3_U0_ap_idle,
        ap_ready => DigitRec_entry3_U0_ap_ready,
        start_out => DigitRec_entry3_U0_start_out,
        start_write => DigitRec_entry3_U0_start_write,
        num_training => num_training,
        num_test => num_test,
        num_training_out_din => DigitRec_entry3_U0_num_training_out_din,
        num_training_out_full_n => num_training_c1_full_n,
        num_training_out_write => DigitRec_entry3_U0_num_training_out_write,
        num_test_out_din => DigitRec_entry3_U0_num_test_out_din,
        num_test_out_full_n => num_test_c2_full_n,
        num_test_out_write => DigitRec_entry3_U0_num_test_out_write);

    DigitRec_entry28_U0 : component DigitRec_entry28
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DigitRec_entry28_U0_ap_start,
        ap_done => DigitRec_entry28_U0_ap_done,
        ap_continue => DigitRec_entry28_U0_ap_continue,
        ap_idle => DigitRec_entry28_U0_ap_idle,
        ap_ready => DigitRec_entry28_U0_ap_ready,
        num_training_dout => num_training_c1_dout,
        num_training_empty_n => num_training_c1_empty_n,
        num_training_read => DigitRec_entry28_U0_num_training_read,
        num_test_dout => num_test_c2_dout,
        num_test_empty_n => num_test_c2_empty_n,
        num_test_read => DigitRec_entry28_U0_num_test_read,
        num_training_out_din => DigitRec_entry28_U0_num_training_out_din,
        num_training_out_full_n => num_training_c_full_n,
        num_training_out_write => DigitRec_entry28_U0_num_training_out_write,
        num_test_out_din => DigitRec_entry28_U0_num_test_out_din,
        num_test_out_full_n => num_test_c_full_n,
        num_test_out_write => DigitRec_entry28_U0_num_test_out_write,
        num_test_out1_din => DigitRec_entry28_U0_num_test_out1_din,
        num_test_out1_full_n => num_test_c1108_full_n,
        num_test_out1_write => DigitRec_entry28_U0_num_test_out1_write);

    Loop_1_proc_U0 : component Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_1_proc_U0_ap_start,
        ap_done => Loop_1_proc_U0_ap_done,
        ap_continue => Loop_1_proc_U0_ap_continue,
        ap_idle => Loop_1_proc_U0_ap_idle,
        ap_ready => Loop_1_proc_U0_ap_ready,
        global_training_set_V_address0 => Loop_1_proc_U0_global_training_set_V_address0,
        global_training_set_V_ce0 => Loop_1_proc_U0_global_training_set_V_ce0,
        global_training_set_V_q0 => global_training_set_V_q0,
        training_set_V_0_address0 => Loop_1_proc_U0_training_set_V_0_address0,
        training_set_V_0_ce0 => Loop_1_proc_U0_training_set_V_0_ce0,
        training_set_V_0_we0 => Loop_1_proc_U0_training_set_V_0_we0,
        training_set_V_0_d0 => Loop_1_proc_U0_training_set_V_0_d0,
        training_set_V_1_address0 => Loop_1_proc_U0_training_set_V_1_address0,
        training_set_V_1_ce0 => Loop_1_proc_U0_training_set_V_1_ce0,
        training_set_V_1_we0 => Loop_1_proc_U0_training_set_V_1_we0,
        training_set_V_1_d0 => Loop_1_proc_U0_training_set_V_1_d0,
        training_set_V_2_address0 => Loop_1_proc_U0_training_set_V_2_address0,
        training_set_V_2_ce0 => Loop_1_proc_U0_training_set_V_2_ce0,
        training_set_V_2_we0 => Loop_1_proc_U0_training_set_V_2_we0,
        training_set_V_2_d0 => Loop_1_proc_U0_training_set_V_2_d0,
        training_set_V_3_address0 => Loop_1_proc_U0_training_set_V_3_address0,
        training_set_V_3_ce0 => Loop_1_proc_U0_training_set_V_3_ce0,
        training_set_V_3_we0 => Loop_1_proc_U0_training_set_V_3_we0,
        training_set_V_3_d0 => Loop_1_proc_U0_training_set_V_3_d0,
        training_set_V_4_address0 => Loop_1_proc_U0_training_set_V_4_address0,
        training_set_V_4_ce0 => Loop_1_proc_U0_training_set_V_4_ce0,
        training_set_V_4_we0 => Loop_1_proc_U0_training_set_V_4_we0,
        training_set_V_4_d0 => Loop_1_proc_U0_training_set_V_4_d0,
        training_set_V_5_address0 => Loop_1_proc_U0_training_set_V_5_address0,
        training_set_V_5_ce0 => Loop_1_proc_U0_training_set_V_5_ce0,
        training_set_V_5_we0 => Loop_1_proc_U0_training_set_V_5_we0,
        training_set_V_5_d0 => Loop_1_proc_U0_training_set_V_5_d0,
        training_set_V_6_address0 => Loop_1_proc_U0_training_set_V_6_address0,
        training_set_V_6_ce0 => Loop_1_proc_U0_training_set_V_6_ce0,
        training_set_V_6_we0 => Loop_1_proc_U0_training_set_V_6_we0,
        training_set_V_6_d0 => Loop_1_proc_U0_training_set_V_6_d0,
        training_set_V_7_address0 => Loop_1_proc_U0_training_set_V_7_address0,
        training_set_V_7_ce0 => Loop_1_proc_U0_training_set_V_7_ce0,
        training_set_V_7_we0 => Loop_1_proc_U0_training_set_V_7_we0,
        training_set_V_7_d0 => Loop_1_proc_U0_training_set_V_7_d0,
        training_set_V_8_address0 => Loop_1_proc_U0_training_set_V_8_address0,
        training_set_V_8_ce0 => Loop_1_proc_U0_training_set_V_8_ce0,
        training_set_V_8_we0 => Loop_1_proc_U0_training_set_V_8_we0,
        training_set_V_8_d0 => Loop_1_proc_U0_training_set_V_8_d0,
        training_set_V_9_address0 => Loop_1_proc_U0_training_set_V_9_address0,
        training_set_V_9_ce0 => Loop_1_proc_U0_training_set_V_9_ce0,
        training_set_V_9_we0 => Loop_1_proc_U0_training_set_V_9_we0,
        training_set_V_9_d0 => Loop_1_proc_U0_training_set_V_9_d0);

    Loop_2_proc_U0 : component Loop_2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_2_proc_U0_ap_start,
        ap_done => Loop_2_proc_U0_ap_done,
        ap_continue => Loop_2_proc_U0_ap_continue,
        ap_idle => Loop_2_proc_U0_ap_idle,
        ap_ready => Loop_2_proc_U0_ap_ready,
        num_test_dout => num_test_c_dout,
        num_test_empty_n => num_test_c_empty_n,
        num_test_read => Loop_2_proc_U0_num_test_read,
        global_test_set_V_address0 => Loop_2_proc_U0_global_test_set_V_address0,
        global_test_set_V_ce0 => Loop_2_proc_U0_global_test_set_V_ce0,
        global_test_set_V_q0 => global_test_set_V_q0,
        test_set_V_din => Loop_2_proc_U0_test_set_V_din,
        test_set_V_full_n => test_set_V_full_n,
        test_set_V_write => Loop_2_proc_U0_test_set_V_write);

    Loop_TEST_LOOP_proc2_U0 : component Loop_TEST_LOOP_proc2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_TEST_LOOP_proc2_U0_ap_start,
        ap_done => Loop_TEST_LOOP_proc2_U0_ap_done,
        ap_continue => Loop_TEST_LOOP_proc2_U0_ap_continue,
        ap_idle => Loop_TEST_LOOP_proc2_U0_ap_idle,
        ap_ready => Loop_TEST_LOOP_proc2_U0_ap_ready,
        num_training_dout => num_training_c_dout,
        num_training_empty_n => num_training_c_empty_n,
        num_training_read => Loop_TEST_LOOP_proc2_U0_num_training_read,
        num_test_dout => num_test_c1108_dout,
        num_test_empty_n => num_test_c1108_empty_n,
        num_test_read => Loop_TEST_LOOP_proc2_U0_num_test_read,
        num_test_out_din => Loop_TEST_LOOP_proc2_U0_num_test_out_din,
        num_test_out_full_n => num_test_c1109_full_n,
        num_test_out_write => Loop_TEST_LOOP_proc2_U0_num_test_out_write,
        results_address0 => Loop_TEST_LOOP_proc2_U0_results_address0,
        results_ce0 => Loop_TEST_LOOP_proc2_U0_results_ce0,
        results_we0 => Loop_TEST_LOOP_proc2_U0_results_we0,
        results_d0 => Loop_TEST_LOOP_proc2_U0_results_d0,
        training_set_V_0_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_0_address0,
        training_set_V_0_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_0_ce0,
        training_set_V_0_q0 => training_set_V_0_t_q0,
        training_set_V_1_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_1_address0,
        training_set_V_1_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_1_ce0,
        training_set_V_1_q0 => training_set_V_1_t_q0,
        training_set_V_2_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_2_address0,
        training_set_V_2_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_2_ce0,
        training_set_V_2_q0 => training_set_V_2_t_q0,
        training_set_V_3_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_3_address0,
        training_set_V_3_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_3_ce0,
        training_set_V_3_q0 => training_set_V_3_t_q0,
        training_set_V_4_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_4_address0,
        training_set_V_4_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_4_ce0,
        training_set_V_4_q0 => training_set_V_4_t_q0,
        training_set_V_5_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_5_address0,
        training_set_V_5_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_5_ce0,
        training_set_V_5_q0 => training_set_V_5_t_q0,
        training_set_V_6_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_6_address0,
        training_set_V_6_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_6_ce0,
        training_set_V_6_q0 => training_set_V_6_t_q0,
        training_set_V_7_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_7_address0,
        training_set_V_7_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_7_ce0,
        training_set_V_7_q0 => training_set_V_7_t_q0,
        training_set_V_8_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_8_address0,
        training_set_V_8_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_8_ce0,
        training_set_V_8_q0 => training_set_V_8_t_q0,
        training_set_V_9_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_9_address0,
        training_set_V_9_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_9_ce0,
        training_set_V_9_q0 => training_set_V_9_t_q0,
        test_set_V_dout => test_set_V_dout,
        test_set_V_empty_n => test_set_V_empty_n,
        test_set_V_read => Loop_TEST_LOOP_proc2_U0_test_set_V_read);

    Loop_4_proc_U0 : component Loop_4_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_4_proc_U0_ap_start,
        ap_done => Loop_4_proc_U0_ap_done,
        ap_continue => Loop_4_proc_U0_ap_continue,
        ap_idle => Loop_4_proc_U0_ap_idle,
        ap_ready => Loop_4_proc_U0_ap_ready,
        num_test_dout => num_test_c1109_dout,
        num_test_empty_n => num_test_c1109_empty_n,
        num_test_read => Loop_4_proc_U0_num_test_read,
        global_results_address0 => Loop_4_proc_U0_global_results_address0,
        global_results_ce0 => Loop_4_proc_U0_global_results_ce0,
        global_results_we0 => Loop_4_proc_U0_global_results_we0,
        global_results_d0 => Loop_4_proc_U0_global_results_d0,
        results_address0 => Loop_4_proc_U0_results_address0,
        results_ce0 => Loop_4_proc_U0_results_ce0,
        results_q0 => results_t_q0);

    training_set_V_0_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_0_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_0_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_0_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_0_d0,
        i_q0 => training_set_V_0_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_0_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_0_i_full_n,
        i_write => ap_channel_done_training_set_V_0,
        t_empty_n => training_set_V_0_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    training_set_V_1_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_1_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_1_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_1_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_1_d0,
        i_q0 => training_set_V_1_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_1_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_1_i_full_n,
        i_write => ap_channel_done_training_set_V_1,
        t_empty_n => training_set_V_1_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    training_set_V_2_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_2_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_2_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_2_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_2_d0,
        i_q0 => training_set_V_2_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_2_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_2_i_full_n,
        i_write => ap_channel_done_training_set_V_2,
        t_empty_n => training_set_V_2_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    training_set_V_3_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_3_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_3_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_3_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_3_d0,
        i_q0 => training_set_V_3_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_3_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_3_i_full_n,
        i_write => ap_channel_done_training_set_V_3,
        t_empty_n => training_set_V_3_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    training_set_V_4_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_4_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_4_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_4_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_4_d0,
        i_q0 => training_set_V_4_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_4_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_4_i_full_n,
        i_write => ap_channel_done_training_set_V_4,
        t_empty_n => training_set_V_4_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    training_set_V_5_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_5_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_5_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_5_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_5_d0,
        i_q0 => training_set_V_5_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_5_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_5_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_5_i_full_n,
        i_write => ap_channel_done_training_set_V_5,
        t_empty_n => training_set_V_5_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    training_set_V_6_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_6_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_6_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_6_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_6_d0,
        i_q0 => training_set_V_6_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_6_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_6_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_6_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_6_i_full_n,
        i_write => ap_channel_done_training_set_V_6,
        t_empty_n => training_set_V_6_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    training_set_V_7_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_7_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_7_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_7_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_7_d0,
        i_q0 => training_set_V_7_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_7_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_7_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_7_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_7_i_full_n,
        i_write => ap_channel_done_training_set_V_7,
        t_empty_n => training_set_V_7_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    training_set_V_8_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_8_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_8_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_8_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_8_d0,
        i_q0 => training_set_V_8_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_8_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_8_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_8_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_8_i_full_n,
        i_write => ap_channel_done_training_set_V_8,
        t_empty_n => training_set_V_8_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    training_set_V_9_U : component DigitRec_trainingg8j
    generic map (
        DataWidth => 256,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc_U0_training_set_V_9_address0,
        i_ce0 => Loop_1_proc_U0_training_set_V_9_ce0,
        i_we0 => Loop_1_proc_U0_training_set_V_9_we0,
        i_d0 => Loop_1_proc_U0_training_set_V_9_d0,
        i_q0 => training_set_V_9_i_q0,
        t_address0 => Loop_TEST_LOOP_proc2_U0_training_set_V_9_address0,
        t_ce0 => Loop_TEST_LOOP_proc2_U0_training_set_V_9_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => training_set_V_9_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => training_set_V_9_i_full_n,
        i_write => ap_channel_done_training_set_V_9,
        t_empty_n => training_set_V_9_t_empty_n,
        t_read => Loop_TEST_LOOP_proc2_U0_ap_ready);

    results_U : component DigitRec_results
    generic map (
        DataWidth => 4,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_TEST_LOOP_proc2_U0_results_address0,
        i_ce0 => Loop_TEST_LOOP_proc2_U0_results_ce0,
        i_we0 => Loop_TEST_LOOP_proc2_U0_results_we0,
        i_d0 => Loop_TEST_LOOP_proc2_U0_results_d0,
        i_q0 => results_i_q0,
        t_address0 => Loop_4_proc_U0_results_address0,
        t_ce0 => Loop_4_proc_U0_results_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv4_0,
        t_q0 => results_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => results_i_full_n,
        i_write => Loop_TEST_LOOP_proc2_U0_ap_done,
        t_empty_n => results_t_empty_n,
        t_read => Loop_4_proc_U0_ap_ready);

    num_training_c1_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DigitRec_entry3_U0_num_training_out_din,
        if_full_n => num_training_c1_full_n,
        if_write => DigitRec_entry3_U0_num_training_out_write,
        if_dout => num_training_c1_dout,
        if_empty_n => num_training_c1_empty_n,
        if_read => DigitRec_entry28_U0_num_training_read);

    num_test_c2_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DigitRec_entry3_U0_num_test_out_din,
        if_full_n => num_test_c2_full_n,
        if_write => DigitRec_entry3_U0_num_test_out_write,
        if_dout => num_test_c2_dout,
        if_empty_n => num_test_c2_empty_n,
        if_read => DigitRec_entry28_U0_num_test_read);

    num_training_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DigitRec_entry28_U0_num_training_out_din,
        if_full_n => num_training_c_full_n,
        if_write => DigitRec_entry28_U0_num_training_out_write,
        if_dout => num_training_c_dout,
        if_empty_n => num_training_c_empty_n,
        if_read => Loop_TEST_LOOP_proc2_U0_num_training_read);

    num_test_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DigitRec_entry28_U0_num_test_out_din,
        if_full_n => num_test_c_full_n,
        if_write => DigitRec_entry28_U0_num_test_out_write,
        if_dout => num_test_c_dout,
        if_empty_n => num_test_c_empty_n,
        if_read => Loop_2_proc_U0_num_test_read);

    num_test_c1108_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DigitRec_entry28_U0_num_test_out1_din,
        if_full_n => num_test_c1108_full_n,
        if_write => DigitRec_entry28_U0_num_test_out1_write,
        if_dout => num_test_c1108_dout,
        if_empty_n => num_test_c1108_empty_n,
        if_read => Loop_TEST_LOOP_proc2_U0_num_test_read);

    test_set_V_U : component fifo_w256_d2000_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_test_set_V_din,
        if_full_n => test_set_V_full_n,
        if_write => Loop_2_proc_U0_test_set_V_write,
        if_dout => test_set_V_dout,
        if_empty_n => test_set_V_empty_n,
        if_read => Loop_TEST_LOOP_proc2_U0_test_set_V_read);

    num_test_c1109_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_TEST_LOOP_proc2_U0_num_test_out_din,
        if_full_n => num_test_c1109_full_n,
        if_write => Loop_TEST_LOOP_proc2_U0_num_test_out_write,
        if_dout => num_test_c1109_dout,
        if_empty_n => num_test_c1109_empty_n,
        if_read => Loop_4_proc_U0_num_test_read);

    start_for_DigitReqcK_U : component start_for_DigitReqcK
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_DigitRec_entry28_U0_din,
        if_full_n => start_for_DigitRec_entry28_U0_full_n,
        if_write => DigitRec_entry3_U0_start_write,
        if_dout => start_for_DigitRec_entry28_U0_dout,
        if_empty_n => start_for_DigitRec_entry28_U0_empty_n,
        if_read => DigitRec_entry28_U0_ap_ready);





    ap_sync_reg_DigitRec_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_DigitRec_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_DigitRec_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_DigitRec_entry3_U0_ap_ready <= ap_sync_DigitRec_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_sync_Loop_1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_2_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_2_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_2_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_2_proc_U0_ap_ready <= ap_sync_Loop_2_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_0 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_0 <= ap_sync_channel_write_training_set_V_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_1 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_1 <= ap_sync_channel_write_training_set_V_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_2 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_2 <= ap_sync_channel_write_training_set_V_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_3 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_3 <= ap_sync_channel_write_training_set_V_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_4 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_4 <= ap_sync_channel_write_training_set_V_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_5 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_5 <= ap_sync_channel_write_training_set_V_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_6 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_6 <= ap_sync_channel_write_training_set_V_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_7 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_7 <= ap_sync_channel_write_training_set_V_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_8 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_8 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_8 <= ap_sync_channel_write_training_set_V_8;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_training_set_V_9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_training_set_V_9 <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_training_set_V_9 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_training_set_V_9 <= ap_sync_channel_write_training_set_V_9;
                end if; 
            end if;
        end if;
    end process;


    DigitRec_entry3_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = DigitRec_entry3_U0_ap_ready))) then 
                DigitRec_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(DigitRec_entry3_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = DigitRec_entry3_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                DigitRec_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(DigitRec_entry3_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_1_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_1_proc_U0_ap_ready))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_1_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_2_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_2_proc_U0_ap_ready))) then 
                Loop_2_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_2_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_2_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_2_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_2_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    DigitRec_entry28_U0_ap_continue <= ap_const_logic_1;
    DigitRec_entry28_U0_ap_start <= start_for_DigitRec_entry28_U0_empty_n;
    DigitRec_entry28_U0_start_full_n <= ap_const_logic_1;
    DigitRec_entry28_U0_start_write <= ap_const_logic_0;
    DigitRec_entry3_U0_ap_continue <= ap_const_logic_1;
    DigitRec_entry3_U0_ap_start <= ((ap_sync_reg_DigitRec_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_1_proc_U0_ap_continue <= (ap_sync_channel_write_training_set_V_9 and ap_sync_channel_write_training_set_V_8 and ap_sync_channel_write_training_set_V_7 and ap_sync_channel_write_training_set_V_6 and ap_sync_channel_write_training_set_V_5 and ap_sync_channel_write_training_set_V_4 and ap_sync_channel_write_training_set_V_3 and ap_sync_channel_write_training_set_V_2 and ap_sync_channel_write_training_set_V_1 and ap_sync_channel_write_training_set_V_0);
    Loop_1_proc_U0_ap_start <= ((ap_sync_reg_Loop_1_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_1_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_1_proc_U0_start_write <= ap_const_logic_0;
    Loop_1_proc_U0_training_set_V_0_full_n <= training_set_V_0_i_full_n;
    Loop_1_proc_U0_training_set_V_1_full_n <= training_set_V_1_i_full_n;
    Loop_1_proc_U0_training_set_V_2_full_n <= training_set_V_2_i_full_n;
    Loop_1_proc_U0_training_set_V_3_full_n <= training_set_V_3_i_full_n;
    Loop_1_proc_U0_training_set_V_4_full_n <= training_set_V_4_i_full_n;
    Loop_1_proc_U0_training_set_V_5_full_n <= training_set_V_5_i_full_n;
    Loop_1_proc_U0_training_set_V_6_full_n <= training_set_V_6_i_full_n;
    Loop_1_proc_U0_training_set_V_7_full_n <= training_set_V_7_i_full_n;
    Loop_1_proc_U0_training_set_V_8_full_n <= training_set_V_8_i_full_n;
    Loop_1_proc_U0_training_set_V_9_full_n <= training_set_V_9_i_full_n;
    Loop_2_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc_U0_ap_start <= ((ap_sync_reg_Loop_2_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_2_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_2_proc_U0_start_write <= ap_const_logic_0;
    Loop_4_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_4_proc_U0_ap_start <= results_t_empty_n;
    Loop_4_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_4_proc_U0_start_write <= ap_const_logic_0;
    Loop_TEST_LOOP_proc2_U0_ap_continue <= results_i_full_n;
    Loop_TEST_LOOP_proc2_U0_ap_start <= (training_set_V_9_t_empty_n and training_set_V_8_t_empty_n and training_set_V_7_t_empty_n and training_set_V_6_t_empty_n and training_set_V_5_t_empty_n and training_set_V_4_t_empty_n and training_set_V_3_t_empty_n and training_set_V_2_t_empty_n and training_set_V_1_t_empty_n and training_set_V_0_t_empty_n);
    Loop_TEST_LOOP_proc2_U0_results_full_n <= results_i_full_n;
    Loop_TEST_LOOP_proc2_U0_start_full_n <= ap_const_logic_1;
    Loop_TEST_LOOP_proc2_U0_start_write <= ap_const_logic_0;
    ap_channel_done_results <= Loop_TEST_LOOP_proc2_U0_ap_done;
    ap_channel_done_training_set_V_0 <= ((ap_sync_reg_channel_write_training_set_V_0 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_training_set_V_1 <= ((ap_sync_reg_channel_write_training_set_V_1 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_training_set_V_2 <= ((ap_sync_reg_channel_write_training_set_V_2 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_training_set_V_3 <= ((ap_sync_reg_channel_write_training_set_V_3 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_training_set_V_4 <= ((ap_sync_reg_channel_write_training_set_V_4 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_training_set_V_5 <= ((ap_sync_reg_channel_write_training_set_V_5 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_training_set_V_6 <= ((ap_sync_reg_channel_write_training_set_V_6 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_training_set_V_7 <= ((ap_sync_reg_channel_write_training_set_V_7 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_training_set_V_8 <= ((ap_sync_reg_channel_write_training_set_V_8 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_training_set_V_9 <= ((ap_sync_reg_channel_write_training_set_V_9 xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_done <= Loop_4_proc_U0_ap_done;
    ap_idle <= ((results_t_empty_n xor ap_const_logic_1) and (training_set_V_9_t_empty_n xor ap_const_logic_1) and (training_set_V_8_t_empty_n xor ap_const_logic_1) and (training_set_V_7_t_empty_n xor ap_const_logic_1) and (training_set_V_6_t_empty_n xor ap_const_logic_1) and (training_set_V_5_t_empty_n xor ap_const_logic_1) and (training_set_V_4_t_empty_n xor ap_const_logic_1) and (training_set_V_3_t_empty_n xor ap_const_logic_1) and (training_set_V_2_t_empty_n xor ap_const_logic_1) and (training_set_V_1_t_empty_n xor ap_const_logic_1) and (training_set_V_0_t_empty_n xor ap_const_logic_1) and Loop_TEST_LOOP_proc2_U0_ap_idle and Loop_4_proc_U0_ap_idle and Loop_2_proc_U0_ap_idle and Loop_1_proc_U0_ap_idle and DigitRec_entry3_U0_ap_idle and DigitRec_entry28_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_DigitRec_entry3_U0_ap_ready <= (ap_sync_reg_DigitRec_entry3_U0_ap_ready or DigitRec_entry3_U0_ap_ready);
    ap_sync_Loop_1_proc_U0_ap_ready <= (ap_sync_reg_Loop_1_proc_U0_ap_ready or Loop_1_proc_U0_ap_ready);
    ap_sync_Loop_2_proc_U0_ap_ready <= (ap_sync_reg_Loop_2_proc_U0_ap_ready or Loop_2_proc_U0_ap_ready);
    ap_sync_channel_write_training_set_V_0 <= ((ap_channel_done_training_set_V_0 and Loop_1_proc_U0_training_set_V_0_full_n) or ap_sync_reg_channel_write_training_set_V_0);
    ap_sync_channel_write_training_set_V_1 <= ((ap_channel_done_training_set_V_1 and Loop_1_proc_U0_training_set_V_1_full_n) or ap_sync_reg_channel_write_training_set_V_1);
    ap_sync_channel_write_training_set_V_2 <= ((ap_channel_done_training_set_V_2 and Loop_1_proc_U0_training_set_V_2_full_n) or ap_sync_reg_channel_write_training_set_V_2);
    ap_sync_channel_write_training_set_V_3 <= ((ap_channel_done_training_set_V_3 and Loop_1_proc_U0_training_set_V_3_full_n) or ap_sync_reg_channel_write_training_set_V_3);
    ap_sync_channel_write_training_set_V_4 <= ((ap_channel_done_training_set_V_4 and Loop_1_proc_U0_training_set_V_4_full_n) or ap_sync_reg_channel_write_training_set_V_4);
    ap_sync_channel_write_training_set_V_5 <= ((ap_channel_done_training_set_V_5 and Loop_1_proc_U0_training_set_V_5_full_n) or ap_sync_reg_channel_write_training_set_V_5);
    ap_sync_channel_write_training_set_V_6 <= ((ap_channel_done_training_set_V_6 and Loop_1_proc_U0_training_set_V_6_full_n) or ap_sync_reg_channel_write_training_set_V_6);
    ap_sync_channel_write_training_set_V_7 <= ((ap_channel_done_training_set_V_7 and Loop_1_proc_U0_training_set_V_7_full_n) or ap_sync_reg_channel_write_training_set_V_7);
    ap_sync_channel_write_training_set_V_8 <= ((ap_channel_done_training_set_V_8 and Loop_1_proc_U0_training_set_V_8_full_n) or ap_sync_reg_channel_write_training_set_V_8);
    ap_sync_channel_write_training_set_V_9 <= ((ap_channel_done_training_set_V_9 and Loop_1_proc_U0_training_set_V_9_full_n) or ap_sync_reg_channel_write_training_set_V_9);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_4_proc_U0_ap_done;
    ap_sync_ready <= (ap_sync_Loop_2_proc_U0_ap_ready and ap_sync_Loop_1_proc_U0_ap_ready and ap_sync_DigitRec_entry3_U0_ap_ready);
    global_results_address0 <= Loop_4_proc_U0_global_results_address0;
    global_results_address1 <= ap_const_lv11_0;
    global_results_ce0 <= Loop_4_proc_U0_global_results_ce0;
    global_results_ce1 <= ap_const_logic_0;
    global_results_d0 <= Loop_4_proc_U0_global_results_d0;
    global_results_d1 <= ap_const_lv8_0;
    global_results_we0 <= Loop_4_proc_U0_global_results_we0;
    global_results_we1 <= ap_const_logic_0;
    global_test_set_V_address0 <= Loop_2_proc_U0_global_test_set_V_address0;
    global_test_set_V_address1 <= ap_const_lv11_0;
    global_test_set_V_ce0 <= Loop_2_proc_U0_global_test_set_V_ce0;
    global_test_set_V_ce1 <= ap_const_logic_0;
    global_test_set_V_d0 <= ap_const_lv256_lc_1;
    global_test_set_V_d1 <= ap_const_lv256_lc_1;
    global_test_set_V_we0 <= ap_const_logic_0;
    global_test_set_V_we1 <= ap_const_logic_0;
    global_training_set_V_address0 <= Loop_1_proc_U0_global_training_set_V_address0;
    global_training_set_V_address1 <= ap_const_lv15_0;
    global_training_set_V_ce0 <= Loop_1_proc_U0_global_training_set_V_ce0;
    global_training_set_V_ce1 <= ap_const_logic_0;
    global_training_set_V_d0 <= ap_const_lv256_lc_1;
    global_training_set_V_d1 <= ap_const_lv256_lc_1;
    global_training_set_V_we0 <= ap_const_logic_0;
    global_training_set_V_we1 <= ap_const_logic_0;
    start_for_DigitRec_entry28_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
