// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_1_proc_HH_
#define _Loop_1_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_1_proc : public sc_module {
    // Port declarations 50
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<15> > global_training_set_V_address0;
    sc_out< sc_logic > global_training_set_V_ce0;
    sc_in< sc_lv<256> > global_training_set_V_q0;
    sc_out< sc_lv<11> > training_set_V_0_address0;
    sc_out< sc_logic > training_set_V_0_ce0;
    sc_out< sc_logic > training_set_V_0_we0;
    sc_out< sc_lv<256> > training_set_V_0_d0;
    sc_out< sc_lv<11> > training_set_V_1_address0;
    sc_out< sc_logic > training_set_V_1_ce0;
    sc_out< sc_logic > training_set_V_1_we0;
    sc_out< sc_lv<256> > training_set_V_1_d0;
    sc_out< sc_lv<11> > training_set_V_2_address0;
    sc_out< sc_logic > training_set_V_2_ce0;
    sc_out< sc_logic > training_set_V_2_we0;
    sc_out< sc_lv<256> > training_set_V_2_d0;
    sc_out< sc_lv<11> > training_set_V_3_address0;
    sc_out< sc_logic > training_set_V_3_ce0;
    sc_out< sc_logic > training_set_V_3_we0;
    sc_out< sc_lv<256> > training_set_V_3_d0;
    sc_out< sc_lv<11> > training_set_V_4_address0;
    sc_out< sc_logic > training_set_V_4_ce0;
    sc_out< sc_logic > training_set_V_4_we0;
    sc_out< sc_lv<256> > training_set_V_4_d0;
    sc_out< sc_lv<11> > training_set_V_5_address0;
    sc_out< sc_logic > training_set_V_5_ce0;
    sc_out< sc_logic > training_set_V_5_we0;
    sc_out< sc_lv<256> > training_set_V_5_d0;
    sc_out< sc_lv<11> > training_set_V_6_address0;
    sc_out< sc_logic > training_set_V_6_ce0;
    sc_out< sc_logic > training_set_V_6_we0;
    sc_out< sc_lv<256> > training_set_V_6_d0;
    sc_out< sc_lv<11> > training_set_V_7_address0;
    sc_out< sc_logic > training_set_V_7_ce0;
    sc_out< sc_logic > training_set_V_7_we0;
    sc_out< sc_lv<256> > training_set_V_7_d0;
    sc_out< sc_lv<11> > training_set_V_8_address0;
    sc_out< sc_logic > training_set_V_8_ce0;
    sc_out< sc_logic > training_set_V_8_we0;
    sc_out< sc_lv<256> > training_set_V_8_d0;
    sc_out< sc_lv<11> > training_set_V_9_address0;
    sc_out< sc_logic > training_set_V_9_ce0;
    sc_out< sc_logic > training_set_V_9_we0;
    sc_out< sc_lv<256> > training_set_V_9_d0;


    // Module declarations
    Loop_1_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_1_proc);

    ~Loop_1_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<15> > i_0_i_reg_233;
    sc_signal< sc_lv<30> > phi_mul_reg_244;
    sc_signal< sc_lv<15> > phi_urem_reg_255;
    sc_signal< sc_lv<1> > icmp_ln165_fu_267_p2;
    sc_signal< sc_lv<1> > icmp_ln165_reg_334;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<15> > i_fu_273_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<30> > add_ln321_fu_284_p2;
    sc_signal< sc_lv<4> > tmp_reg_353;
    sc_signal< sc_lv<15> > select_ln169_fu_326_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<64> > zext_ln168_fu_279_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln321_fu_300_p1;
    sc_signal< sc_lv<15> > add_ln169_fu_314_p2;
    sc_signal< sc_lv<1> > icmp_ln169_fu_320_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<30> ap_const_lv30_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<4> ap_const_lv4_D;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<15> ap_const_lv15_4650;
    static const sc_lv<15> ap_const_lv15_1;
    static const sc_lv<30> ap_const_lv30_91A3;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<15> ap_const_lv15_708;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln169_fu_314_p2();
    void thread_add_ln321_fu_284_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_global_training_set_V_address0();
    void thread_global_training_set_V_ce0();
    void thread_i_fu_273_p2();
    void thread_icmp_ln165_fu_267_p2();
    void thread_icmp_ln169_fu_320_p2();
    void thread_select_ln169_fu_326_p3();
    void thread_training_set_V_0_address0();
    void thread_training_set_V_0_ce0();
    void thread_training_set_V_0_d0();
    void thread_training_set_V_0_we0();
    void thread_training_set_V_1_address0();
    void thread_training_set_V_1_ce0();
    void thread_training_set_V_1_d0();
    void thread_training_set_V_1_we0();
    void thread_training_set_V_2_address0();
    void thread_training_set_V_2_ce0();
    void thread_training_set_V_2_d0();
    void thread_training_set_V_2_we0();
    void thread_training_set_V_3_address0();
    void thread_training_set_V_3_ce0();
    void thread_training_set_V_3_d0();
    void thread_training_set_V_3_we0();
    void thread_training_set_V_4_address0();
    void thread_training_set_V_4_ce0();
    void thread_training_set_V_4_d0();
    void thread_training_set_V_4_we0();
    void thread_training_set_V_5_address0();
    void thread_training_set_V_5_ce0();
    void thread_training_set_V_5_d0();
    void thread_training_set_V_5_we0();
    void thread_training_set_V_6_address0();
    void thread_training_set_V_6_ce0();
    void thread_training_set_V_6_d0();
    void thread_training_set_V_6_we0();
    void thread_training_set_V_7_address0();
    void thread_training_set_V_7_ce0();
    void thread_training_set_V_7_d0();
    void thread_training_set_V_7_we0();
    void thread_training_set_V_8_address0();
    void thread_training_set_V_8_ce0();
    void thread_training_set_V_8_d0();
    void thread_training_set_V_8_we0();
    void thread_training_set_V_9_address0();
    void thread_training_set_V_9_ce0();
    void thread_training_set_V_9_d0();
    void thread_training_set_V_9_we0();
    void thread_zext_ln168_fu_279_p1();
    void thread_zext_ln321_fu_300_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
