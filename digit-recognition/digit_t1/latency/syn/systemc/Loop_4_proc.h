// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_4_proc_HH_
#define _Loop_4_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_4_proc : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > num_test_dout;
    sc_in< sc_logic > num_test_empty_n;
    sc_out< sc_logic > num_test_read;
    sc_out< sc_lv<11> > global_results_address0;
    sc_out< sc_logic > global_results_ce0;
    sc_out< sc_logic > global_results_we0;
    sc_out< sc_lv<8> > global_results_d0;
    sc_out< sc_lv<11> > results_address0;
    sc_out< sc_logic > results_ce0;
    sc_in< sc_lv<4> > results_q0;


    // Module declarations
    Loop_4_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_4_proc);

    ~Loop_4_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > num_test_blk_n;
    sc_signal< sc_lv<31> > i4_0_i_i_reg_80;
    sc_signal< sc_lv<32> > num_test_read_reg_116;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln215_fu_95_p2;
    sc_signal< sc_lv<1> > icmp_ln215_reg_121;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > i_fu_100_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln218_fu_106_p1;
    sc_signal< sc_lv<64> > zext_ln218_reg_130;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > zext_ln215_fu_91_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_global_results_address0();
    void thread_global_results_ce0();
    void thread_global_results_d0();
    void thread_global_results_we0();
    void thread_i_fu_100_p2();
    void thread_icmp_ln215_fu_95_p2();
    void thread_num_test_blk_n();
    void thread_num_test_read();
    void thread_results_address0();
    void thread_results_ce0();
    void thread_zext_ln215_fu_91_p1();
    void thread_zext_ln218_fu_106_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
