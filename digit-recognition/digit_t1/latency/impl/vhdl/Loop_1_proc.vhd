-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    global_training_set_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    global_training_set_V_ce0 : OUT STD_LOGIC;
    global_training_set_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_0_ce0 : OUT STD_LOGIC;
    training_set_V_0_we0 : OUT STD_LOGIC;
    training_set_V_0_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_1_ce0 : OUT STD_LOGIC;
    training_set_V_1_we0 : OUT STD_LOGIC;
    training_set_V_1_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_2_ce0 : OUT STD_LOGIC;
    training_set_V_2_we0 : OUT STD_LOGIC;
    training_set_V_2_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_3_ce0 : OUT STD_LOGIC;
    training_set_V_3_we0 : OUT STD_LOGIC;
    training_set_V_3_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_4_ce0 : OUT STD_LOGIC;
    training_set_V_4_we0 : OUT STD_LOGIC;
    training_set_V_4_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_5_ce0 : OUT STD_LOGIC;
    training_set_V_5_we0 : OUT STD_LOGIC;
    training_set_V_5_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_6_ce0 : OUT STD_LOGIC;
    training_set_V_6_we0 : OUT STD_LOGIC;
    training_set_V_6_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_7_ce0 : OUT STD_LOGIC;
    training_set_V_7_we0 : OUT STD_LOGIC;
    training_set_V_7_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_8_ce0 : OUT STD_LOGIC;
    training_set_V_8_we0 : OUT STD_LOGIC;
    training_set_V_8_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    training_set_V_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    training_set_V_9_ce0 : OUT STD_LOGIC;
    training_set_V_9_we0 : OUT STD_LOGIC;
    training_set_V_9_d0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv15_4650 : STD_LOGIC_VECTOR (14 downto 0) := "100011001010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv30_91A3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001001000110100011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv15_708 : STD_LOGIC_VECTOR (14 downto 0) := "000011100001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_i_reg_233 : STD_LOGIC_VECTOR (14 downto 0);
    signal phi_mul_reg_244 : STD_LOGIC_VECTOR (29 downto 0);
    signal phi_urem_reg_255 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln165_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_273_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln321_fu_284_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_reg_353 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln169_fu_326_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal zext_ln168_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln321_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln169_fu_314_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln169_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln165_fu_267_p2 = ap_const_lv1_0))) then 
                i_0_i_reg_233 <= i_fu_273_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_233 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln165_fu_267_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_244 <= add_ln321_fu_284_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_244 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln165_reg_334 = ap_const_lv1_0))) then 
                phi_urem_reg_255 <= select_ln169_fu_326_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_urem_reg_255 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln165_reg_334 <= icmp_ln165_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln165_fu_267_p2 = ap_const_lv1_0))) then
                tmp_reg_353 <= phi_mul_reg_244(29 downto 26);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln165_fu_267_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln165_fu_267_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln165_fu_267_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln169_fu_314_p2 <= std_logic_vector(unsigned(phi_urem_reg_255) + unsigned(ap_const_lv15_1));
    add_ln321_fu_284_p2 <= std_logic_vector(unsigned(phi_mul_reg_244) + unsigned(ap_const_lv30_91A3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln165_fu_267_p2)
    begin
        if ((icmp_ln165_fu_267_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    global_training_set_V_address0 <= zext_ln168_fu_279_p1(15 - 1 downto 0);

    global_training_set_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            global_training_set_V_ce0 <= ap_const_logic_1;
        else 
            global_training_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_273_p2 <= std_logic_vector(unsigned(i_0_i_reg_233) + unsigned(ap_const_lv15_1));
    icmp_ln165_fu_267_p2 <= "1" when (i_0_i_reg_233 = ap_const_lv15_4650) else "0";
    icmp_ln169_fu_320_p2 <= "1" when (unsigned(add_ln169_fu_314_p2) < unsigned(ap_const_lv15_708)) else "0";
    select_ln169_fu_326_p3 <= 
        add_ln169_fu_314_p2 when (icmp_ln169_fu_320_p2(0) = '1') else 
        ap_const_lv15_0;
    training_set_V_0_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_0_ce0 <= ap_const_logic_1;
        else 
            training_set_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_0_d0 <= global_training_set_V_q0;

    training_set_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_353 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_0_we0 <= ap_const_logic_1;
        else 
            training_set_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_1_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_1_ce0 <= ap_const_logic_1;
        else 
            training_set_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_1_d0 <= global_training_set_V_q0;

    training_set_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_353 = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_1_we0 <= ap_const_logic_1;
        else 
            training_set_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_2_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_2_ce0 <= ap_const_logic_1;
        else 
            training_set_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_2_d0 <= global_training_set_V_q0;

    training_set_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_353 = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_2_we0 <= ap_const_logic_1;
        else 
            training_set_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_3_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_3_ce0 <= ap_const_logic_1;
        else 
            training_set_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_3_d0 <= global_training_set_V_q0;

    training_set_V_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_353 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_3_we0 <= ap_const_logic_1;
        else 
            training_set_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_4_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_4_ce0 <= ap_const_logic_1;
        else 
            training_set_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_4_d0 <= global_training_set_V_q0;

    training_set_V_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_353 = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_4_we0 <= ap_const_logic_1;
        else 
            training_set_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_5_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_5_ce0 <= ap_const_logic_1;
        else 
            training_set_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_5_d0 <= global_training_set_V_q0;

    training_set_V_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_353 = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_5_we0 <= ap_const_logic_1;
        else 
            training_set_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_6_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_6_ce0 <= ap_const_logic_1;
        else 
            training_set_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_6_d0 <= global_training_set_V_q0;

    training_set_V_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_353 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_6_we0 <= ap_const_logic_1;
        else 
            training_set_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_7_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_7_ce0 <= ap_const_logic_1;
        else 
            training_set_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_7_d0 <= global_training_set_V_q0;

    training_set_V_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_353 = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_7_we0 <= ap_const_logic_1;
        else 
            training_set_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_8_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_8_ce0 <= ap_const_logic_1;
        else 
            training_set_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_8_d0 <= global_training_set_V_q0;

    training_set_V_8_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_353 = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_8_we0 <= ap_const_logic_1;
        else 
            training_set_V_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_9_address0 <= zext_ln321_fu_300_p1(11 - 1 downto 0);

    training_set_V_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            training_set_V_9_ce0 <= ap_const_logic_1;
        else 
            training_set_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_set_V_9_d0 <= global_training_set_V_q0;

    training_set_V_9_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((tmp_reg_353 = ap_const_lv4_9) or ((tmp_reg_353 = ap_const_lv4_A) or ((tmp_reg_353 = ap_const_lv4_B) or ((tmp_reg_353 = ap_const_lv4_C) or ((tmp_reg_353 = ap_const_lv4_D) or ((tmp_reg_353 = ap_const_lv4_E) or (tmp_reg_353 = ap_const_lv4_F))))))))) then 
            training_set_V_9_we0 <= ap_const_logic_1;
        else 
            training_set_V_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln168_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_233),64));
    zext_ln321_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_255),64));
end behav;
