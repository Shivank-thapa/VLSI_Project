-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity knn_vote is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    knn_set_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_18_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_19_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_20_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_21_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_22_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_23_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_24_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_25_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_26_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_27_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_28_read : IN STD_LOGIC_VECTOR (31 downto 0);
    knn_set_29_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of knn_vote is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln94_fu_565_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln94_1_fu_591_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln94_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal label_list_2_3_fu_805_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_0_1_fu_821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_5_fu_861_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_0_3_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_1_2_fu_885_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_1_2_fu_893_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_901_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_1013_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln129_3_fu_1358_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln129_3_reg_2024 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln129_2_fu_1370_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln129_2_reg_2029 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_424 : STD_LOGIC_VECTOR (4 downto 0);
    signal label_list_2_6_reg_435 : STD_LOGIC_VECTOR (3 downto 0);
    signal label_list_2_12_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_1_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_1_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_1_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_515 : STD_LOGIC_VECTOR (1 downto 0);
    signal i4_0_reg_526 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln118_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal vote_list_9_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_0_fu_1091_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln120_fu_1061_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal vote_list_9_1_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_2_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_3_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_4_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_5_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal vote_list_9_6_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_7_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_8_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_9_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_10_fu_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_11_fu_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_12_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_13_fu_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_14_fu_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_15_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_16_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_17_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_18_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_19_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln100_fu_541_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_545_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln100_fu_537_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln95_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln94_1_fu_585_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln100_1_fu_607_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln100_mid1_fu_611_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln100_2_fu_603_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln100_1_fu_619_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln100_fu_553_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln94_fu_577_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln100_1_fu_633_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln94_2_fu_625_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal min_distance_list_2_2_fu_643_p31 : STD_LOGIC_VECTOR (4 downto 0);
    signal min_distance_list_2_2_fu_643_p32 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln100_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_icmp_ln100_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_1_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_1_cast_cast_fu_705_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln100_fu_685_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln100_1_fu_709_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_727_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln100_3_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln100_2_fu_717_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal phitmp_2_fu_743_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln100_2_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_2_cast_cast_fu_751_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln100_2_fu_755_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_763_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln106_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln106_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln109_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln94_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_2_fu_785_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_0_fu_813_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln106_1_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_1_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln106_1_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln109_1_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal label_list_2_4_fu_841_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_0_2_fu_869_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1049_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1065_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1065_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln129_fu_1218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln129_fu_1228_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_1_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln129_fu_1224_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln129_1_fu_1242_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln_fu_1254_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln_fu_1254_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_2_fu_1292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln129_2_fu_1298_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln129_1_fu_1314_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln129_1_fu_1314_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_3_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln129_2_fu_1306_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln129_2_fu_1370_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln129_4_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln129_4_fu_1428_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln129_3_fu_1439_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln129_3_fu_1439_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_5_fu_1472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln129_5_fu_1478_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln129_4_fu_1490_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln129_4_fu_1490_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_6_fu_1523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln129_6_fu_1529_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_7_fu_1537_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln129_5_fu_1541_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_7_fu_1574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln129_7_fu_1580_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln129_6_fu_1588_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_8_fu_1621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component DigitRec_mux_305_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_mux_32_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_mux_104_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_mux_164_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    DigitRec_mux_305_bkb_U152 : component DigitRec_mux_305_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => knn_set_0_read,
        din1 => knn_set_1_read,
        din2 => knn_set_2_read,
        din3 => knn_set_3_read,
        din4 => knn_set_4_read,
        din5 => knn_set_5_read,
        din6 => knn_set_6_read,
        din7 => knn_set_7_read,
        din8 => knn_set_8_read,
        din9 => knn_set_9_read,
        din10 => knn_set_10_read,
        din11 => knn_set_11_read,
        din12 => knn_set_12_read,
        din13 => knn_set_13_read,
        din14 => knn_set_14_read,
        din15 => knn_set_15_read,
        din16 => knn_set_16_read,
        din17 => knn_set_17_read,
        din18 => knn_set_18_read,
        din19 => knn_set_19_read,
        din20 => knn_set_20_read,
        din21 => knn_set_21_read,
        din22 => knn_set_22_read,
        din23 => knn_set_23_read,
        din24 => knn_set_24_read,
        din25 => knn_set_25_read,
        din26 => knn_set_26_read,
        din27 => knn_set_27_read,
        din28 => knn_set_28_read,
        din29 => knn_set_29_read,
        din30 => min_distance_list_2_2_fu_643_p31,
        dout => min_distance_list_2_2_fu_643_p32);

    DigitRec_mux_32_3dEe_U153 : component DigitRec_mux_32_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => label_list_1_reg_470,
        din1 => label_list_2_reg_458,
        din2 => label_list_2_12_reg_446,
        din3 => i4_0_reg_526,
        dout => tmp_4_fu_1049_p5);

    DigitRec_mux_104_eOg_U154 : component DigitRec_mux_104_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => vote_list_9_10_fu_204,
        din1 => vote_list_9_11_fu_208,
        din2 => vote_list_9_12_fu_212,
        din3 => vote_list_9_13_fu_216,
        din4 => vote_list_9_14_fu_220,
        din5 => vote_list_9_15_fu_224,
        din6 => vote_list_9_16_fu_228,
        din7 => vote_list_9_17_fu_232,
        din8 => vote_list_9_18_fu_236,
        din9 => vote_list_9_19_fu_240,
        din10 => tmp_5_fu_1065_p11,
        dout => tmp_5_fu_1065_p12);

    DigitRec_mux_164_fYi_U155 : component DigitRec_mux_164_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => vote_list_9_fu_164,
        din1 => vote_list_9_1_fu_168,
        din2 => vote_list_9_2_fu_172,
        din3 => vote_list_9_2_fu_172,
        din4 => vote_list_9_2_fu_172,
        din5 => vote_list_9_2_fu_172,
        din6 => vote_list_9_2_fu_172,
        din7 => vote_list_9_2_fu_172,
        din8 => vote_list_9_2_fu_172,
        din9 => vote_list_9_2_fu_172,
        din10 => vote_list_9_2_fu_172,
        din11 => vote_list_9_2_fu_172,
        din12 => vote_list_9_2_fu_172,
        din13 => vote_list_9_2_fu_172,
        din14 => vote_list_9_2_fu_172,
        din15 => vote_list_9_2_fu_172,
        din16 => phi_ln_fu_1254_p17,
        dout => phi_ln_fu_1254_p18);

    DigitRec_mux_164_fYi_U156 : component DigitRec_mux_164_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => vote_list_9_fu_164,
        din1 => vote_list_9_1_fu_168,
        din2 => vote_list_9_2_fu_172,
        din3 => vote_list_9_3_fu_176,
        din4 => vote_list_9_3_fu_176,
        din5 => vote_list_9_3_fu_176,
        din6 => vote_list_9_3_fu_176,
        din7 => vote_list_9_3_fu_176,
        din8 => vote_list_9_3_fu_176,
        din9 => vote_list_9_3_fu_176,
        din10 => vote_list_9_3_fu_176,
        din11 => vote_list_9_3_fu_176,
        din12 => vote_list_9_3_fu_176,
        din13 => vote_list_9_3_fu_176,
        din14 => vote_list_9_3_fu_176,
        din15 => vote_list_9_3_fu_176,
        din16 => phi_ln129_1_fu_1314_p17,
        dout => phi_ln129_1_fu_1314_p18);

    DigitRec_mux_164_fYi_U157 : component DigitRec_mux_164_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => vote_list_9_fu_164,
        din1 => vote_list_9_1_fu_168,
        din2 => vote_list_9_2_fu_172,
        din3 => vote_list_9_3_fu_176,
        din4 => vote_list_9_4_fu_180,
        din5 => vote_list_9_4_fu_180,
        din6 => vote_list_9_4_fu_180,
        din7 => vote_list_9_4_fu_180,
        din8 => vote_list_9_4_fu_180,
        din9 => vote_list_9_4_fu_180,
        din10 => vote_list_9_4_fu_180,
        din11 => vote_list_9_4_fu_180,
        din12 => vote_list_9_4_fu_180,
        din13 => vote_list_9_4_fu_180,
        din14 => vote_list_9_4_fu_180,
        din15 => vote_list_9_4_fu_180,
        din16 => phi_ln129_2_fu_1370_p17,
        dout => phi_ln129_2_fu_1370_p18);

    DigitRec_mux_164_fYi_U158 : component DigitRec_mux_164_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => vote_list_9_fu_164,
        din1 => vote_list_9_1_fu_168,
        din2 => vote_list_9_2_fu_172,
        din3 => vote_list_9_3_fu_176,
        din4 => vote_list_9_4_fu_180,
        din5 => vote_list_9_5_fu_184,
        din6 => vote_list_9_5_fu_184,
        din7 => vote_list_9_5_fu_184,
        din8 => vote_list_9_5_fu_184,
        din9 => vote_list_9_5_fu_184,
        din10 => vote_list_9_5_fu_184,
        din11 => vote_list_9_5_fu_184,
        din12 => vote_list_9_5_fu_184,
        din13 => vote_list_9_5_fu_184,
        din14 => vote_list_9_5_fu_184,
        din15 => vote_list_9_5_fu_184,
        din16 => phi_ln129_3_fu_1439_p17,
        dout => phi_ln129_3_fu_1439_p18);

    DigitRec_mux_164_fYi_U159 : component DigitRec_mux_164_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => vote_list_9_fu_164,
        din1 => vote_list_9_1_fu_168,
        din2 => vote_list_9_2_fu_172,
        din3 => vote_list_9_3_fu_176,
        din4 => vote_list_9_4_fu_180,
        din5 => vote_list_9_5_fu_184,
        din6 => vote_list_9_6_fu_188,
        din7 => vote_list_9_6_fu_188,
        din8 => vote_list_9_6_fu_188,
        din9 => vote_list_9_6_fu_188,
        din10 => vote_list_9_6_fu_188,
        din11 => vote_list_9_6_fu_188,
        din12 => vote_list_9_6_fu_188,
        din13 => vote_list_9_6_fu_188,
        din14 => vote_list_9_6_fu_188,
        din15 => vote_list_9_6_fu_188,
        din16 => phi_ln129_4_fu_1490_p17,
        dout => phi_ln129_4_fu_1490_p18);

    DigitRec_mux_164_fYi_U160 : component DigitRec_mux_164_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => vote_list_9_fu_164,
        din1 => vote_list_9_1_fu_168,
        din2 => vote_list_9_2_fu_172,
        din3 => vote_list_9_3_fu_176,
        din4 => vote_list_9_4_fu_180,
        din5 => vote_list_9_5_fu_184,
        din6 => vote_list_9_6_fu_188,
        din7 => vote_list_9_7_fu_192,
        din8 => vote_list_9_7_fu_192,
        din9 => vote_list_9_7_fu_192,
        din10 => vote_list_9_7_fu_192,
        din11 => vote_list_9_7_fu_192,
        din12 => vote_list_9_7_fu_192,
        din13 => vote_list_9_7_fu_192,
        din14 => vote_list_9_7_fu_192,
        din15 => vote_list_9_7_fu_192,
        din16 => zext_ln129_7_fu_1537_p1,
        dout => phi_ln129_5_fu_1541_p18);

    DigitRec_mux_164_fYi_U161 : component DigitRec_mux_164_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => vote_list_9_fu_164,
        din1 => vote_list_9_1_fu_168,
        din2 => vote_list_9_2_fu_172,
        din3 => vote_list_9_3_fu_176,
        din4 => vote_list_9_4_fu_180,
        din5 => vote_list_9_5_fu_184,
        din6 => vote_list_9_6_fu_188,
        din7 => vote_list_9_7_fu_192,
        din8 => vote_list_9_8_fu_196,
        din9 => vote_list_9_8_fu_196,
        din10 => vote_list_9_8_fu_196,
        din11 => vote_list_9_8_fu_196,
        din12 => vote_list_9_8_fu_196,
        din13 => vote_list_9_8_fu_196,
        din14 => vote_list_9_8_fu_196,
        din15 => vote_list_9_8_fu_196,
        din16 => select_ln129_7_fu_1580_p3,
        dout => phi_ln129_6_fu_1588_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i4_0_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i4_0_reg_526 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                i4_0_reg_526 <= i_fu_1013_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_424 <= add_ln94_fu_565_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_424 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then 
                j_0_reg_515 <= j_fu_901_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_515 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    label_list_1_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then 
                label_list_1_reg_470 <= label_list_1_2_fu_885_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                label_list_1_reg_470 <= ap_const_lv32_9;
            end if; 
        end if;
    end process;

    label_list_2_12_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then 
                label_list_2_12_reg_446 <= label_list_2_3_fu_805_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                label_list_2_12_reg_446 <= ap_const_lv32_9;
            end if; 
        end if;
    end process;

    label_list_2_6_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then 
                label_list_2_6_reg_435 <= select_ln94_1_fu_591_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                label_list_2_6_reg_435 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    label_list_2_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then 
                label_list_2_reg_458 <= label_list_2_5_fu_861_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                label_list_2_reg_458 <= ap_const_lv32_9;
            end if; 
        end if;
    end process;

    min_distance_list_1_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then 
                min_distance_list_1_reg_504 <= min_distance_list_1_2_fu_893_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                min_distance_list_1_reg_504 <= ap_const_lv32_100;
            end if; 
        end if;
    end process;

    min_distance_list_2_1_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then 
                min_distance_list_2_1_reg_482 <= min_distance_list_0_1_fu_821_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                min_distance_list_2_1_reg_482 <= ap_const_lv32_100;
            end if; 
        end if;
    end process;

    min_distance_list_2_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then 
                min_distance_list_2_reg_493 <= min_distance_list_0_3_fu_877_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                min_distance_list_2_reg_493 <= ap_const_lv32_100;
            end if; 
        end if;
    end process;

    vote_list_9_10_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln120_fu_1061_p1 = ap_const_lv4_0) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_10_fu_204 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_10_fu_204 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_11_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_11_fu_208 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_11_fu_208 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_12_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_12_fu_212 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_12_fu_212 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_13_fu_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_13_fu_216 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_13_fu_216 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_14_fu_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_14_fu_220 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_14_fu_220 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_15_fu_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_15_fu_224 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_15_fu_224 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_16_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_16_fu_228 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_16_fu_228 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_17_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_17_fu_232 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_17_fu_232 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_18_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_18_fu_236 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_18_fu_236 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_19_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln120_fu_1061_p1 = ap_const_lv4_8)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_7)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_6)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_5)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_4)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_3)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_2)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_1)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_0)) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_19_fu_240 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_19_fu_240 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_1_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_1_fu_168 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_1_fu_168 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_2_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_2_fu_172 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_2_fu_172 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_3_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_3_fu_176 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_3_fu_176 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_4_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_4_fu_180 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_4_fu_180 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_5_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_5_fu_184 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_5_fu_184 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_6_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_6_fu_188 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_6_fu_188 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_7_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_7_fu_192 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_7_fu_192 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_8_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln120_fu_1061_p1 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_8_fu_196 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_8_fu_196 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_9_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln120_fu_1061_p1 = ap_const_lv4_8)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_7)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_6)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_5)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_4)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_3)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_2)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_1)) and not((trunc_ln120_fu_1061_p1 = ap_const_lv4_0)) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_9_fu_200 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_9_fu_200 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vote_list_9_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln120_fu_1061_p1 = ap_const_lv4_0) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then 
                vote_list_9_fu_164 <= vote_list_0_fu_1091_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vote_list_9_fu_164 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                phi_ln129_2_reg_2029 <= phi_ln129_2_fu_1370_p18;
                select_ln129_3_reg_2024 <= select_ln129_3_fu_1358_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln94_fu_559_p2, ap_CS_fsm_state4, icmp_ln118_fu_1007_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln94_fu_559_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln118_fu_1007_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln94_1_fu_585_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(label_list_2_6_reg_435));
    add_ln94_fu_565_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(indvar_flatten_reg_424));
    and_ln109_1_fu_855_p2 <= (xor_ln106_1_fu_849_p2 and icmp_ln109_1_fu_835_p2);
    and_ln109_fu_799_p2 <= (xor_ln106_fu_793_p2 and icmp_ln109_fu_779_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln129_7_fu_1580_p3 when (icmp_ln129_8_fu_1621_p2(0) = '1') else 
        ap_const_lv4_9;
    i_fu_1013_p2 <= std_logic_vector(unsigned(i4_0_reg_526) + unsigned(ap_const_lv2_1));
    icmp_ln100_1_fu_693_p2 <= "1" when (signed(min_distance_list_2_2_fu_643_p32) < signed(min_distance_list_2_reg_493)) else "0";
    icmp_ln100_2_fu_721_p2 <= "1" when (signed(min_distance_list_2_2_fu_643_p32) < signed(min_distance_list_2_1_reg_482)) else "0";
    icmp_ln100_3_fu_737_p2 <= "0" when (tmp_fu_727_p4 = ap_const_lv4_0) else "1";
    icmp_ln100_fu_679_p2 <= "1" when (signed(min_distance_list_2_2_fu_643_p32) < signed(min_distance_list_1_reg_504)) else "0";
    icmp_ln106_1_fu_829_p2 <= "1" when (select_ln100_2_fu_755_p3 = ap_const_lv6_0) else "0";
    icmp_ln106_fu_773_p2 <= "1" when (tmp_1_fu_763_p4 = ap_const_lv5_0) else "0";
    icmp_ln109_1_fu_835_p2 <= "1" when (select_ln100_2_fu_755_p3 = ap_const_lv6_1) else "0";
    icmp_ln109_fu_779_p2 <= "1" when (select_ln100_2_fu_755_p3 = ap_const_lv6_2) else "0";
    icmp_ln118_fu_1007_p2 <= "1" when (i4_0_reg_526 = ap_const_lv2_3) else "0";
    icmp_ln129_1_fu_1236_p2 <= "1" when (signed(vote_list_9_2_fu_172) < signed(select_ln129_fu_1228_p3)) else "0";
    icmp_ln129_2_fu_1292_p2 <= "1" when (signed(vote_list_9_3_fu_176) < signed(phi_ln_fu_1254_p18)) else "0";
    icmp_ln129_3_fu_1352_p2 <= "1" when (signed(vote_list_9_4_fu_180) < signed(phi_ln129_1_fu_1314_p18)) else "0";
    icmp_ln129_4_fu_1423_p2 <= "1" when (signed(vote_list_9_5_fu_184) < signed(phi_ln129_2_reg_2029)) else "0";
    icmp_ln129_5_fu_1472_p2 <= "1" when (signed(vote_list_9_6_fu_188) < signed(phi_ln129_3_fu_1439_p18)) else "0";
    icmp_ln129_6_fu_1523_p2 <= "1" when (signed(vote_list_9_7_fu_192) < signed(phi_ln129_4_fu_1490_p18)) else "0";
    icmp_ln129_7_fu_1574_p2 <= "1" when (signed(vote_list_9_8_fu_196) < signed(phi_ln129_5_fu_1541_p18)) else "0";
    icmp_ln129_8_fu_1621_p2 <= "1" when (signed(vote_list_9_9_fu_200) < signed(phi_ln129_6_fu_1588_p18)) else "0";
    icmp_ln129_fu_1212_p2 <= "1" when (signed(vote_list_9_1_fu_168) < signed(vote_list_9_fu_164)) else "0";
    icmp_ln94_fu_559_p2 <= "1" when (indvar_flatten_reg_424 = ap_const_lv5_1E) else "0";
    icmp_ln95_fu_571_p2 <= "1" when (j_0_reg_515 = ap_const_lv2_3) else "0";
    j_fu_901_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln94_fu_577_p3));
    label_list_1_2_fu_885_p3 <= 
        zext_ln94_fu_599_p1 when (icmp_ln106_1_fu_829_p2(0) = '1') else 
        label_list_1_reg_470;
    label_list_2_2_fu_785_p3 <= 
        label_list_2_reg_458 when (icmp_ln106_fu_773_p2(0) = '1') else 
        label_list_2_12_reg_446;
    label_list_2_3_fu_805_p3 <= 
        zext_ln94_fu_599_p1 when (and_ln109_fu_799_p2(0) = '1') else 
        label_list_2_2_fu_785_p3;
    label_list_2_4_fu_841_p3 <= 
        label_list_1_reg_470 when (icmp_ln106_1_fu_829_p2(0) = '1') else 
        label_list_2_reg_458;
    label_list_2_5_fu_861_p3 <= 
        zext_ln94_fu_599_p1 when (and_ln109_1_fu_855_p2(0) = '1') else 
        label_list_2_4_fu_841_p3;
    min_distance_list_0_1_fu_821_p3 <= 
        min_distance_list_2_2_fu_643_p32 when (and_ln109_fu_799_p2(0) = '1') else 
        min_distance_list_0_fu_813_p3;
    min_distance_list_0_2_fu_869_p3 <= 
        min_distance_list_1_reg_504 when (icmp_ln106_1_fu_829_p2(0) = '1') else 
        min_distance_list_2_reg_493;
    min_distance_list_0_3_fu_877_p3 <= 
        min_distance_list_2_2_fu_643_p32 when (and_ln109_1_fu_855_p2(0) = '1') else 
        min_distance_list_0_2_fu_869_p3;
    min_distance_list_0_fu_813_p3 <= 
        min_distance_list_2_reg_493 when (icmp_ln106_fu_773_p2(0) = '1') else 
        min_distance_list_2_1_reg_482;
    min_distance_list_1_2_fu_893_p3 <= 
        min_distance_list_2_2_fu_643_p32 when (icmp_ln106_1_fu_829_p2(0) = '1') else 
        min_distance_list_1_reg_504;
    min_distance_list_2_2_fu_643_p31 <= std_logic_vector(unsigned(zext_ln100_1_fu_633_p1) + unsigned(select_ln94_2_fu_625_p3));
    not_icmp_ln100_fu_699_p2 <= (icmp_ln100_fu_679_p2 xor ap_const_lv1_1);
    phi_ln129_1_fu_1314_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln129_2_fu_1298_p3),4));
    phi_ln129_2_fu_1370_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln129_3_fu_1358_p3),4));
    phi_ln129_3_fu_1439_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln129_4_fu_1428_p3),4));
    phi_ln129_4_fu_1490_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln129_5_fu_1478_p3),4));
    phi_ln_fu_1254_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln129_1_fu_1242_p3),4));
    phitmp_1_cast_cast_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(not_icmp_ln100_fu_699_p2),6));
    phitmp_2_cast_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_2_fu_743_p3),6));
    phitmp_2_fu_743_p3 <= 
        ap_const_lv2_2 when (icmp_ln100_3_fu_737_p2(0) = '1') else 
        trunc_ln100_2_fu_717_p1;
    select_ln100_1_fu_709_p3 <= 
        phitmp_1_cast_cast_fu_705_p1 when (icmp_ln100_1_fu_693_p2(0) = '1') else 
        select_ln100_fu_685_p3;
    select_ln100_2_fu_755_p3 <= 
        phitmp_2_cast_cast_fu_751_p1 when (icmp_ln100_2_fu_721_p2(0) = '1') else 
        select_ln100_1_fu_709_p3;
    select_ln100_fu_685_p3 <= 
        ap_const_lv6_0 when (icmp_ln100_fu_679_p2(0) = '1') else 
        ap_const_lv6_28;
    select_ln129_1_fu_1242_p3 <= 
        zext_ln129_fu_1224_p1 when (icmp_ln129_1_fu_1236_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln129_2_fu_1298_p3 <= 
        select_ln129_1_fu_1242_p3 when (icmp_ln129_2_fu_1292_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln129_3_fu_1358_p3 <= 
        zext_ln129_2_fu_1306_p1 when (icmp_ln129_3_fu_1352_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln129_4_fu_1428_p3 <= 
        select_ln129_3_reg_2024 when (icmp_ln129_4_fu_1423_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln129_5_fu_1478_p3 <= 
        select_ln129_4_fu_1428_p3 when (icmp_ln129_5_fu_1472_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln129_6_fu_1529_p3 <= 
        select_ln129_5_fu_1478_p3 when (icmp_ln129_6_fu_1523_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln129_7_fu_1580_p3 <= 
        zext_ln129_7_fu_1537_p1 when (icmp_ln129_7_fu_1574_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln129_fu_1228_p3 <= 
        vote_list_9_fu_164 when (icmp_ln129_fu_1212_p2(0) = '1') else 
        vote_list_9_1_fu_168;
    select_ln94_1_fu_591_p3 <= 
        add_ln94_1_fu_585_p2 when (icmp_ln95_fu_571_p2(0) = '1') else 
        label_list_2_6_reg_435;
    select_ln94_2_fu_625_p3 <= 
        sub_ln100_1_fu_619_p2 when (icmp_ln95_fu_571_p2(0) = '1') else 
        sub_ln100_fu_553_p2;
    select_ln94_fu_577_p3 <= 
        ap_const_lv2_0 when (icmp_ln95_fu_571_p2(0) = '1') else 
        j_0_reg_515;
    shl_ln100_mid1_fu_611_p3 <= (trunc_ln100_1_fu_607_p1 & ap_const_lv2_0);
    shl_ln_fu_545_p3 <= (trunc_ln100_fu_541_p1 & ap_const_lv2_0);
    sub_ln100_1_fu_619_p2 <= std_logic_vector(unsigned(shl_ln100_mid1_fu_611_p3) - unsigned(zext_ln100_2_fu_603_p1));
    sub_ln100_fu_553_p2 <= std_logic_vector(unsigned(shl_ln_fu_545_p3) - unsigned(zext_ln100_fu_537_p1));
    tmp_1_fu_763_p4 <= select_ln100_2_fu_755_p3(5 downto 1);
    tmp_5_fu_1065_p11 <= tmp_4_fu_1049_p5(4 - 1 downto 0);
    tmp_fu_727_p4 <= select_ln100_1_fu_709_p3(5 downto 2);
    trunc_ln100_1_fu_607_p1 <= add_ln94_1_fu_585_p2(3 - 1 downto 0);
    trunc_ln100_2_fu_717_p1 <= select_ln100_1_fu_709_p3(2 - 1 downto 0);
    trunc_ln100_fu_541_p1 <= label_list_2_6_reg_435(3 - 1 downto 0);
    trunc_ln120_fu_1061_p1 <= tmp_4_fu_1049_p5(4 - 1 downto 0);
    vote_list_0_fu_1091_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_5_fu_1065_p12));
    xor_ln106_1_fu_849_p2 <= (icmp_ln106_1_fu_829_p2 xor ap_const_lv1_1);
    xor_ln106_fu_793_p2 <= (icmp_ln106_fu_773_p2 xor ap_const_lv1_1);
    xor_ln129_fu_1218_p2 <= (icmp_ln129_fu_1212_p2 xor ap_const_lv1_1);
    zext_ln100_1_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln94_fu_577_p3),5));
    zext_ln100_2_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_1_fu_585_p2),5));
    zext_ln100_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(label_list_2_6_reg_435),5));
    zext_ln129_2_fu_1306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln129_2_fu_1298_p3),3));
    zext_ln129_7_fu_1537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln129_6_fu_1529_p3),4));
    zext_ln129_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln129_fu_1218_p2),2));
    zext_ln94_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln94_1_fu_591_p3),32));
end behav;
