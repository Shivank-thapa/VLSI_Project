-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DigitRec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    global_training_set_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    global_training_set_V_ce0 : OUT STD_LOGIC;
    global_training_set_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
    global_test_set_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    global_test_set_V_ce0 : OUT STD_LOGIC;
    global_test_set_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
    global_results_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    global_results_ce0 : OUT STD_LOGIC;
    global_results_we0 : OUT STD_LOGIC;
    global_results_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    num_training : IN STD_LOGIC_VECTOR (31 downto 0);
    num_test : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DigitRec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DigitRec,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku5p-ffvb676-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.473594,HLS_SYN_LAT=-1898726292,HLS_SYN_TPT=none,HLS_SYN_MEM=287,HLS_SYN_DSP=4,HLS_SYN_FF=1480,HLS_SYN_LUT=3083,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_100 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_const_lv15_4650 : STD_LOGIC_VECTOR (14 downto 0) := "100011001010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv15_708 : STD_LOGIC_VECTOR (14 downto 0) := "000011100001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal training_set_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal training_set_V_ce0 : STD_LOGIC;
    signal training_set_V_we0 : STD_LOGIC;
    signal training_set_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal test_set_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal test_set_V_ce0 : STD_LOGIC;
    signal test_set_V_we0 : STD_LOGIC;
    signal test_set_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal results_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal results_ce0 : STD_LOGIC;
    signal results_we0 : STD_LOGIC;
    signal results_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_449_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_reg_814 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln172_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln172_reg_819 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln169_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_469_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_5_reg_832 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln179_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_837 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln176_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iter_cnt_fu_544_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal iter_cnt_reg_847 : STD_LOGIC_VECTOR (28 downto 0);
    signal t_fu_559_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal t_reg_855 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln189_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln189_reg_860 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln185_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal test_instance_V_reg_870 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_6_fu_576_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln199_fu_587_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln199_reg_883 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln199_1_fu_591_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln199_1_reg_888 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln199_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_601_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_8_reg_897 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_617_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_905 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln202_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln209_fu_641_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln209_reg_915 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_fu_651_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal ret_V_reg_924 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_9_fu_666_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal cnt_fu_683_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln17_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln47_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln47_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal k_fu_703_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_955 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln42_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln202_fu_747_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln44_fu_763_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal select_ln44_1_fu_771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_fu_787_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_7_reg_986 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln224_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln224_reg_991 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln221_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal knn_set_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal knn_set_ce0 : STD_LOGIC;
    signal knn_set_we0 : STD_LOGIC;
    signal knn_set_d0 : STD_LOGIC_VECTOR (10 downto 0);
    signal knn_set_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_knn_vote_fu_437_ap_start : STD_LOGIC;
    signal grp_knn_vote_fu_437_ap_done : STD_LOGIC;
    signal grp_knn_vote_fu_437_ap_idle : STD_LOGIC;
    signal grp_knn_vote_fu_437_ap_ready : STD_LOGIC;
    signal grp_knn_vote_fu_437_knn_set_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_knn_vote_fu_437_knn_set_ce0 : STD_LOGIC;
    signal grp_knn_vote_fu_437_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_290 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_301 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t_0_reg_312 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i2_0_reg_323 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln192_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_0_reg_334 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln211_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_345 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_0_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal dist_reg_368 : STD_LOGIC_VECTOR (8 downto 0);
    signal bvh_d_index_reg_380 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_dist_0_i_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_dist_id_0_i_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_dist_id_reg_415 : STD_LOGIC_VECTOR (1 downto 0);
    signal i4_0_reg_426 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_knn_vote_fu_437_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln196_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln206_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln53_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln52_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln53_fu_742_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln176_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln182_fu_480_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln182_fu_483_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln182_fu_483_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_7_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln182_fu_489_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_7_fu_495_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_502_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_9_fu_512_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln182_fu_522_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln182_1_fu_530_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln182_1_fu_536_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln185_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln206_fu_623_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_633_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_cast2_fu_607_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_1_fu_656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_672_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_fu_679_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln44_fu_709_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln44_fu_713_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln53_fu_728_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln53_fu_732_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal max_dist_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln44_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln221_fu_778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component knn_vote IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        knn_set_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        knn_set_ce0 : OUT STD_LOGIC;
        knn_set_q0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component DigitRec_trainingcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component DigitRec_test_set_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component DigitRec_results IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component DigitRec_knn_set IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (10 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    training_set_V_U : component DigitRec_trainingcud
    generic map (
        DataWidth => 256,
        AddressRange => 18000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_set_V_address0,
        ce0 => training_set_V_ce0,
        we0 => training_set_V_we0,
        d0 => global_training_set_V_q0,
        q0 => training_set_V_q0);

    test_set_V_U : component DigitRec_test_set_V
    generic map (
        DataWidth => 256,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => test_set_V_address0,
        ce0 => test_set_V_ce0,
        we0 => test_set_V_we0,
        d0 => global_test_set_V_q0,
        q0 => test_set_V_q0);

    results_U : component DigitRec_results
    generic map (
        DataWidth => 8,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => results_address0,
        ce0 => results_ce0,
        we0 => results_we0,
        d0 => grp_knn_vote_fu_437_ap_return,
        q0 => results_q0);

    knn_set_U : component DigitRec_knn_set
    generic map (
        DataWidth => 11,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => knn_set_address0,
        ce0 => knn_set_ce0,
        we0 => knn_set_we0,
        d0 => knn_set_d0,
        q0 => knn_set_q0);

    grp_knn_vote_fu_437 : component knn_vote
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_knn_vote_fu_437_ap_start,
        ap_done => grp_knn_vote_fu_437_ap_done,
        ap_idle => grp_knn_vote_fu_437_ap_idle,
        ap_ready => grp_knn_vote_fu_437_ap_ready,
        knn_set_address0 => grp_knn_vote_fu_437_knn_set_address0,
        knn_set_ce0 => grp_knn_vote_fu_437_knn_set_ce0,
        knn_set_q0 => knn_set_q0,
        ap_return => grp_knn_vote_fu_437_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_knn_vote_fu_437_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_knn_vote_fu_437_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln199_reg_893 = ap_const_lv1_1) or ((icmp_ln211_fu_647_p2 = ap_const_lv1_1) and (icmp_ln202_fu_611_p2 = ap_const_lv1_1))))) then 
                    grp_knn_vote_fu_437_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_knn_vote_fu_437_ap_ready = ap_const_logic_1)) then 
                    grp_knn_vote_fu_437_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bvh_d_index_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_660_p2 = ap_const_lv1_0))) then 
                bvh_d_index_reg_380 <= i_9_fu_666_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                bvh_d_index_reg_380 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    dist_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_660_p2 = ap_const_lv1_0))) then 
                dist_reg_368 <= cnt_fu_683_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                dist_reg_368 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i1_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln169_fu_443_p2 = ap_const_lv1_1))) then 
                i1_0_reg_301 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_0_reg_301 <= i_5_reg_832;
            end if; 
        end if;
    end process;

    i2_0_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln192_fu_570_p2 = ap_const_lv1_0))) then 
                i2_0_reg_323 <= i_6_fu_576_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i2_0_reg_323 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i3_0_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln192_fu_570_p2 = ap_const_lv1_1))) then 
                i3_0_reg_334 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln202_fu_611_p2 = ap_const_lv1_1) and (icmp_ln211_fu_647_p2 = ap_const_lv1_0) and (icmp_ln199_reg_893 = ap_const_lv1_0))) then 
                i3_0_reg_334 <= i_8_reg_897;
            end if; 
        end if;
    end process;

    i4_0_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln185_fu_554_p2 = ap_const_lv1_0))) then 
                i4_0_reg_426 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i4_0_reg_426 <= i_7_reg_986;
            end if; 
        end if;
    end process;

    i_0_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_290 <= i_reg_814;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_290 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln199_fu_595_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_345 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_697_p2 = ap_const_lv1_1))) then 
                indvars_iv_reg_345 <= add_ln202_fu_747_p2;
            end if; 
        end if;
    end process;

    j_0_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln199_fu_595_p2 = ap_const_lv1_0))) then 
                j_0_reg_357 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_697_p2 = ap_const_lv1_1))) then 
                j_0_reg_357 <= j_reg_905;
            end if; 
        end if;
    end process;

    max_dist_0_i_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_660_p2 = ap_const_lv1_1))) then 
                max_dist_0_i_reg_391 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                max_dist_0_i_reg_391 <= select_ln44_fu_763_p3;
            end if; 
        end if;
    end process;

    max_dist_id_0_i_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_660_p2 = ap_const_lv1_1))) then 
                max_dist_id_0_i_reg_403 <= ap_const_lv32_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                max_dist_id_0_i_reg_403 <= select_ln44_1_fu_771_p3;
            end if; 
        end if;
    end process;

    max_dist_id_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_660_p2 = ap_const_lv1_1))) then 
                max_dist_id_reg_415 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                max_dist_id_reg_415 <= k_reg_955;
            end if; 
        end if;
    end process;

    t_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_knn_vote_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                t_0_reg_312 <= t_reg_855;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln176_fu_464_p2 = ap_const_lv1_0))) then 
                t_0_reg_312 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_5_reg_832 <= i_5_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_7_reg_986 <= i_7_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_8_reg_897 <= i_8_fu_601_p2;
                icmp_ln199_reg_893 <= icmp_ln199_fu_595_p2;
                    zext_ln199_1_reg_888(10 downto 0) <= zext_ln199_1_fu_591_p1(10 downto 0);
                    zext_ln199_reg_883(10 downto 0) <= zext_ln199_fu_587_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_814 <= i_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln176_fu_464_p2 = ap_const_lv1_0))) then
                iter_cnt_reg_847 <= iter_cnt_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln199_reg_893 = ap_const_lv1_0))) then
                j_reg_905 <= j_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                k_reg_955 <= k_fu_703_p2;
                    zext_ln47_reg_947(1 downto 0) <= zext_ln47_fu_693_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ret_V_reg_924 <= ret_V_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln202_fu_611_p2 = ap_const_lv1_0) and (icmp_ln199_reg_893 = ap_const_lv1_0))) then
                sub_ln209_reg_915 <= sub_ln209_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                t_reg_855 <= t_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                test_instance_V_reg_870 <= test_set_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln169_fu_443_p2 = ap_const_lv1_0))) then
                    zext_ln172_reg_819(14 downto 0) <= zext_ln172_fu_455_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln176_fu_464_p2 = ap_const_lv1_1))) then
                    zext_ln179_reg_837(30 downto 0) <= zext_ln179_fu_475_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln185_fu_554_p2 = ap_const_lv1_1))) then
                    zext_ln189_reg_860(30 downto 0) <= zext_ln189_fu_565_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln221_fu_782_p2 = ap_const_lv1_1))) then
                    zext_ln224_reg_991(30 downto 0) <= zext_ln224_fu_793_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_660_p2 = ap_const_lv1_1))) then
                    zext_ln35_reg_942(8 downto 0) <= zext_ln35_fu_689_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln172_reg_819(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln179_reg_837(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln189_reg_860(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln199_reg_883(14 downto 11) <= "0000";
    zext_ln199_1_reg_888(28 downto 11) <= "000000000000000000";
    zext_ln35_reg_942(31 downto 9) <= "00000000000000000000000";
    zext_ln47_reg_947(31 downto 2) <= "000000000000000000000000000000";
    zext_ln224_reg_991(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln169_fu_443_p2, ap_CS_fsm_state4, icmp_ln176_fu_464_p2, ap_CS_fsm_state6, icmp_ln185_fu_554_p2, ap_CS_fsm_state8, icmp_ln199_reg_893, ap_CS_fsm_state10, icmp_ln202_fu_611_p2, ap_CS_fsm_state12, icmp_ln17_fu_660_p2, ap_CS_fsm_state13, icmp_ln42_fu_697_p2, ap_CS_fsm_state16, icmp_ln221_fu_782_p2, grp_knn_vote_fu_437_ap_done, ap_CS_fsm_state15, icmp_ln192_fu_570_p2, icmp_ln211_fu_647_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln169_fu_443_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln176_fu_464_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln185_fu_554_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln192_fu_570_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln202_fu_611_p2 = ap_const_lv1_1) and (icmp_ln211_fu_647_p2 = ap_const_lv1_0) and (icmp_ln199_reg_893 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln199_reg_893 = ap_const_lv1_1) or ((icmp_ln211_fu_647_p2 = ap_const_lv1_1) and (icmp_ln202_fu_611_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_660_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_697_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((grp_knn_vote_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln221_fu_782_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln202_fu_747_p2 <= std_logic_vector(unsigned(indvars_iv_reg_345) + unsigned(ap_const_lv15_708));
    add_ln206_fu_623_p2 <= std_logic_vector(unsigned(indvars_iv_reg_345) + unsigned(zext_ln199_reg_883));
    add_ln44_fu_713_p2 <= std_logic_vector(unsigned(zext_ln44_fu_709_p1) + unsigned(sub_ln209_reg_915));
    add_ln53_fu_732_p2 <= std_logic_vector(unsigned(trunc_ln53_fu_728_p1) + unsigned(sub_ln209_reg_915));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state16, icmp_ln221_fu_782_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln221_fu_782_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, icmp_ln221_fu_782_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln221_fu_782_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_fu_683_p2 <= std_logic_vector(unsigned(zext_ln18_fu_679_p1) + unsigned(dist_reg_368));
    global_results_address0 <= zext_ln224_reg_991(11 - 1 downto 0);

    global_results_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            global_results_ce0 <= ap_const_logic_1;
        else 
            global_results_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    global_results_d0 <= results_q0;

    global_results_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            global_results_we0 <= ap_const_logic_1;
        else 
            global_results_we0 <= ap_const_logic_0;
        end if; 
    end process;

    global_test_set_V_address0 <= zext_ln179_fu_475_p1(11 - 1 downto 0);

    global_test_set_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            global_test_set_V_ce0 <= ap_const_logic_1;
        else 
            global_test_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    global_training_set_V_address0 <= zext_ln172_fu_455_p1(15 - 1 downto 0);

    global_training_set_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            global_training_set_V_ce0 <= ap_const_logic_1;
        else 
            global_training_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_knn_vote_fu_437_ap_start <= grp_knn_vote_fu_437_ap_start_reg;
    i_5_fu_469_p2 <= std_logic_vector(unsigned(i1_0_reg_301) + unsigned(ap_const_lv31_1));
    i_6_fu_576_p2 <= std_logic_vector(unsigned(i2_0_reg_323) + unsigned(ap_const_lv5_1));
    i_7_fu_787_p2 <= std_logic_vector(unsigned(i4_0_reg_426) + unsigned(ap_const_lv31_1));
    i_8_fu_601_p2 <= std_logic_vector(unsigned(i3_0_reg_334) + unsigned(ap_const_lv11_1));
    i_9_fu_666_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_380) + unsigned(ap_const_lv9_1));
    i_fu_449_p2 <= std_logic_vector(unsigned(i_0_reg_290) + unsigned(ap_const_lv15_1));
    icmp_ln169_fu_443_p2 <= "1" when (i_0_reg_290 = ap_const_lv15_4650) else "0";
    icmp_ln176_fu_464_p2 <= "1" when (signed(zext_ln176_fu_460_p1) < signed(num_test)) else "0";
    icmp_ln17_fu_660_p2 <= "1" when (bvh_d_index_reg_380 = ap_const_lv9_100) else "0";
    icmp_ln185_fu_554_p2 <= "1" when (signed(zext_ln185_fu_550_p1) < signed(num_test)) else "0";
    icmp_ln192_fu_570_p2 <= "1" when (i2_0_reg_323 = ap_const_lv5_1E) else "0";
    icmp_ln199_fu_595_p2 <= "1" when (i3_0_reg_334 = ap_const_lv11_708) else "0";
    icmp_ln202_fu_611_p2 <= "1" when (j_0_reg_357 = ap_const_lv4_A) else "0";
    icmp_ln211_fu_647_p2 <= "1" when (zext_ln199_1_reg_888 = iter_cnt_reg_847) else "0";
    icmp_ln221_fu_782_p2 <= "1" when (signed(zext_ln221_fu_778_p1) < signed(num_test)) else "0";
    icmp_ln42_fu_697_p2 <= "1" when (max_dist_id_reg_415 = ap_const_lv2_3) else "0";
    icmp_ln44_fu_757_p2 <= "1" when (signed(max_dist_fu_753_p1) > signed(max_dist_0_i_reg_391)) else "0";
    icmp_ln52_fu_723_p2 <= "1" when (signed(zext_ln35_reg_942) < signed(max_dist_0_i_reg_391)) else "0";
    iter_cnt_fu_544_p2 <= std_logic_vector(unsigned(select_ln182_1_fu_536_p3) + unsigned(ap_const_lv29_1FFFFFFF));
    j_0_cast2_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_357),6));
    j_fu_617_p2 <= std_logic_vector(unsigned(j_0_reg_357) + unsigned(ap_const_lv4_1));
    k_fu_703_p2 <= std_logic_vector(unsigned(max_dist_id_reg_415) + unsigned(ap_const_lv2_1));

    knn_set_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, icmp_ln42_fu_697_p2, grp_knn_vote_fu_437_knn_set_address0, ap_CS_fsm_state15, zext_ln196_fu_582_p1, zext_ln44_1_fu_718_p1, sext_ln53_fu_737_p1, icmp_ln52_fu_723_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln52_fu_723_p2 = ap_const_lv1_1) and (icmp_ln42_fu_697_p2 = ap_const_lv1_1))) then 
            knn_set_address0 <= sext_ln53_fu_737_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_697_p2 = ap_const_lv1_0))) then 
            knn_set_address0 <= zext_ln44_1_fu_718_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            knn_set_address0 <= zext_ln196_fu_582_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            knn_set_address0 <= grp_knn_vote_fu_437_knn_set_address0;
        else 
            knn_set_address0 <= "XXXXX";
        end if; 
    end process;


    knn_set_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, icmp_ln42_fu_697_p2, grp_knn_vote_fu_437_knn_set_ce0, ap_CS_fsm_state15, icmp_ln52_fu_723_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln52_fu_723_p2 = ap_const_lv1_1) and (icmp_ln42_fu_697_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_697_p2 = ap_const_lv1_0)))) then 
            knn_set_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            knn_set_ce0 <= grp_knn_vote_fu_437_knn_set_ce0;
        else 
            knn_set_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    knn_set_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, icmp_ln42_fu_697_p2, icmp_ln52_fu_723_p2, zext_ln53_fu_742_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln52_fu_723_p2 = ap_const_lv1_1) and (icmp_ln42_fu_697_p2 = ap_const_lv1_1))) then 
            knn_set_d0 <= zext_ln53_fu_742_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            knn_set_d0 <= ap_const_lv11_100;
        else 
            knn_set_d0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    knn_set_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, icmp_ln42_fu_697_p2, icmp_ln192_fu_570_p2, icmp_ln52_fu_723_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln52_fu_723_p2 = ap_const_lv1_1) and (icmp_ln42_fu_697_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln192_fu_570_p2 = ap_const_lv1_0)))) then 
            knn_set_we0 <= ap_const_logic_1;
        else 
            knn_set_we0 <= ap_const_logic_0;
        end if; 
    end process;

        max_dist_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(knn_set_q0),32));

    mul_ln182_fu_483_p0 <= sext_ln182_fu_480_p0;
    mul_ln182_fu_483_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln182_fu_483_p0) * signed('0' &ap_const_lv65_19999999A))), 65));
    p_Result_s_fu_672_p3 <= ret_V_reg_924(to_integer(unsigned(zext_ln35_1_fu_656_p1)) downto to_integer(unsigned(zext_ln35_1_fu_656_p1))) when (to_integer(unsigned(zext_ln35_1_fu_656_p1))>= 0 and to_integer(unsigned(zext_ln35_1_fu_656_p1))<=255) else "-";

    results_address0_assign_proc : process(zext_ln189_reg_860, ap_CS_fsm_state16, zext_ln224_fu_793_p1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            results_address0 <= zext_ln224_fu_793_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            results_address0 <= zext_ln189_reg_860(11 - 1 downto 0);
        else 
            results_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    results_ce0_assign_proc : process(ap_CS_fsm_state16, grp_knn_vote_fu_437_ap_done, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((grp_knn_vote_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            results_ce0 <= ap_const_logic_1;
        else 
            results_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    results_we0_assign_proc : process(grp_knn_vote_fu_437_ap_done, ap_CS_fsm_state15)
    begin
        if (((grp_knn_vote_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            results_we0 <= ap_const_logic_1;
        else 
            results_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_651_p2 <= (training_set_V_q0 xor test_instance_V_reg_870);
    select_ln182_1_fu_536_p3 <= 
        sub_ln182_1_fu_530_p2 when (tmp_7_fu_495_p3(0) = '1') else 
        tmp_9_fu_512_p4;
    select_ln182_fu_522_p3 <= 
        tmp_8_fu_502_p4 when (tmp_7_fu_495_p3(0) = '1') else 
        tmp_9_fu_512_p4;
    select_ln44_1_fu_771_p3 <= 
        zext_ln47_reg_947 when (icmp_ln44_fu_757_p2(0) = '1') else 
        max_dist_id_0_i_reg_403;
    select_ln44_fu_763_p3 <= 
        max_dist_fu_753_p1 when (icmp_ln44_fu_757_p2(0) = '1') else 
        max_dist_0_i_reg_391;
    sext_ln182_fu_480_p0 <= num_training;
        sext_ln53_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_fu_732_p2),64));

    shl_ln_fu_633_p3 <= (j_0_reg_357 & ap_const_lv2_0);
    sub_ln182_1_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(select_ln182_fu_522_p3));
    sub_ln182_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln182_fu_483_p2));
    sub_ln209_fu_641_p2 <= std_logic_vector(unsigned(shl_ln_fu_633_p3) - unsigned(j_0_cast2_fu_607_p1));
    t_fu_559_p2 <= std_logic_vector(unsigned(t_0_reg_312) + unsigned(ap_const_lv31_1));

    test_set_V_address0_assign_proc : process(zext_ln179_reg_837, ap_CS_fsm_state6, zext_ln189_fu_565_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            test_set_V_address0 <= zext_ln189_fu_565_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            test_set_V_address0 <= zext_ln179_reg_837(11 - 1 downto 0);
        else 
            test_set_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    test_set_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            test_set_V_ce0 <= ap_const_logic_1;
        else 
            test_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_set_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            test_set_V_we0 <= ap_const_logic_1;
        else 
            test_set_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_7_fu_495_p1 <= num_training;
    tmp_7_fu_495_p3 <= tmp_7_fu_495_p1(31 downto 31);
    tmp_8_fu_502_p4 <= sub_ln182_fu_489_p2(64 downto 36);
    tmp_9_fu_512_p4 <= mul_ln182_fu_483_p2(64 downto 36);

    training_set_V_address0_assign_proc : process(zext_ln172_reg_819, ap_CS_fsm_state10, ap_CS_fsm_state3, zext_ln206_fu_628_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            training_set_V_address0 <= zext_ln206_fu_628_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_set_V_address0 <= zext_ln172_reg_819(15 - 1 downto 0);
        else 
            training_set_V_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_set_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            training_set_V_ce0 <= ap_const_logic_1;
        else 
            training_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_set_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_set_V_we0 <= ap_const_logic_1;
        else 
            training_set_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln53_fu_728_p1 <= max_dist_id_0_i_reg_403(6 - 1 downto 0);
    zext_ln172_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_290),64));
    zext_ln176_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_301),32));
    zext_ln179_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_301),64));
    zext_ln185_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_0_reg_312),32));
    zext_ln189_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_0_reg_312),64));
    zext_ln18_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_672_p3),9));
    zext_ln196_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_323),64));
    zext_ln199_1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_334),29));
    zext_ln199_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_334),15));
    zext_ln206_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln206_fu_623_p2),64));
    zext_ln221_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_426),32));
    zext_ln224_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_426),64));
    zext_ln35_1_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_reg_380),32));
    zext_ln35_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dist_reg_368),32));
    zext_ln44_1_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_fu_713_p2),64));
    zext_ln44_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_dist_id_reg_415),6));
    zext_ln47_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_dist_id_reg_415),32));
    zext_ln53_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dist_reg_368),11));
end behav;
