-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity knn_vote is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    knn_set_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    knn_set_ce0 : OUT STD_LOGIC;
    knn_set_q0 : IN STD_LOGIC_VECTOR (10 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of knn_vote is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal min_distance_list_0_3_reg_982 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal min_distance_list_1_3_reg_987 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_22_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_0_0_load_reg_997 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_1_0_load_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_0_load_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_330_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_fu_372_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln96_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln96_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_3_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_1080 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln105_fu_439_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln105_reg_1085 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln96_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_455_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_1093 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln98_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_distance_list_2_21_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_21_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal r_fu_489_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal pos_fu_536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln102_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_1_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_1_reg_1132 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_566_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln108_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_876_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_1153 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal vote_list_addr_1_reg_1158 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln126_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_912_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_1166 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln136_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln139_fu_938_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal vote_list_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal vote_list_ce0 : STD_LOGIC;
    signal vote_list_we0 : STD_LOGIC;
    signal vote_list_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal vote_list_ce1 : STD_LOGIC;
    signal vote_list_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_175 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln81_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_0_reg_186 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln88_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal label_list_2_21_reg_197 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_0_reg_219 : STD_LOGIC_VECTOR (1 downto 0);
    signal pos_0_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal r3_0_reg_242 : STD_LOGIC_VECTOR (1 downto 0);
    signal i4_0_reg_253 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal max_vote_0_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal i5_0_reg_276 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln91_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln129_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_1_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal min_distance_list_2_1_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_19_fu_832_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_3_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_18_fu_824_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_2_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_17_fu_816_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_1_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_19_fu_808_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_3_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_18_fu_800_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_2_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_17_fu_792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln129_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_427_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln105_1_fu_435_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln96_1_fu_411_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln98_fu_445_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln105_fu_461_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln105_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_495_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_512_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln105_1_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln102_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln105_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln118_fu_544_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln111_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln113_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_1_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_distance_list_2_fu_602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_20_fu_588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_9_fu_648_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_11_fu_661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_fu_680_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_20_fu_640_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_9_fu_712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_11_fu_725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln116_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal label_list_2_10_fu_718_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_12_fu_731_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_13_fu_738_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_10_fu_654_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_12_fu_667_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_13_fu_674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln111_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal label_list_2_5_fu_688_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_14_fu_744_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_6_fu_696_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_15_fu_752_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_7_fu_704_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_list_2_16_fu_760_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_5_fu_616_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_14_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_6_fu_624_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_15_fu_776_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_7_fu_632_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_list_2_16_fu_784_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_882_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln139_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_vote_fu_934_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component DigitRec_mux_32_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component knn_vote_vote_list IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    vote_list_U : component knn_vote_vote_list
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vote_list_address0,
        ce0 => vote_list_ce0,
        we0 => vote_list_we0,
        d0 => vote_list_d0,
        q0 => vote_list_q0,
        address1 => vote_list_address1,
        ce1 => vote_list_ce1,
        q1 => vote_list_q1);

    DigitRec_mux_32_3bkb_U1 : component DigitRec_mux_32_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => min_distance_list_2_1_fu_100,
        din1 => min_distance_list_2_3_fu_104,
        din2 => min_distance_list_2_2_fu_108,
        din3 => r_0_reg_219,
        dout => tmp_3_fu_495_p5);

    DigitRec_mux_32_3bkb_U2 : component DigitRec_mux_32_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => label_list_2_1_fu_112,
        din1 => label_list_2_3_fu_116,
        din2 => label_list_2_2_fu_120,
        din3 => i4_0_reg_253,
        dout => tmp_1_fu_882_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln136_fu_906_p2 = ap_const_lv1_1))) then 
                    ap_return_preg <= max_vote_0_reg_264;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln81_fu_324_p2 = ap_const_lv1_1))) then 
                i1_0_reg_186 <= ap_const_lv4_0;
            elsif (((icmp_ln88_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i1_0_reg_186 <= i_1_fu_372_p2;
            end if; 
        end if;
    end process;

    i4_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i4_0_reg_253 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i4_0_reg_253 <= i_2_reg_1153;
            end if; 
        end if;
    end process;

    i5_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln126_fu_870_p2 = ap_const_lv1_1))) then 
                i5_0_reg_276 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i5_0_reg_276 <= i_4_reg_1166;
            end if; 
        end if;
    end process;

    i_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_175 <= i_fu_330_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_175 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln108_fu_560_p2 = ap_const_lv1_1))) then 
                j_0_reg_208 <= j_reg_1093;
            elsif (((icmp_ln96_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_208 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    label_list_2_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                label_list_2_1_fu_112 <= label_list_2_19_fu_808_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln88_fu_366_p2 = ap_const_lv1_1))) then 
                label_list_2_1_fu_112 <= label_list_0_0_load_reg_997;
            end if; 
        end if;
    end process;

    label_list_2_21_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln88_fu_366_p2 = ap_const_lv1_1))) then 
                label_list_2_21_reg_197 <= ap_const_lv4_0;
            elsif (((icmp_ln98_fu_449_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                label_list_2_21_reg_197 <= i_3_reg_1080;
            end if; 
        end if;
    end process;

    label_list_2_2_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                label_list_2_2_fu_120 <= label_list_2_17_fu_792_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln88_fu_366_p2 = ap_const_lv1_1))) then 
                label_list_2_2_fu_120 <= label_list_2_0_load_reg_1007;
            end if; 
        end if;
    end process;

    label_list_2_3_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                label_list_2_3_fu_116 <= label_list_2_18_fu_800_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln88_fu_366_p2 = ap_const_lv1_1))) then 
                label_list_2_3_fu_116 <= label_list_1_0_load_reg_1002;
            end if; 
        end if;
    end process;

    max_vote_0_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln126_fu_870_p2 = ap_const_lv1_1))) then 
                max_vote_0_reg_264 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                max_vote_0_reg_264 <= select_ln139_fu_938_p3;
            end if; 
        end if;
    end process;

    min_distance_list_2_1_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                min_distance_list_2_1_fu_100 <= min_distance_list_2_19_fu_832_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln88_fu_366_p2 = ap_const_lv1_1))) then 
                min_distance_list_2_1_fu_100 <= min_distance_list_0_3_reg_982;
            end if; 
        end if;
    end process;

    min_distance_list_2_2_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                min_distance_list_2_2_fu_108 <= min_distance_list_2_17_fu_816_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln88_fu_366_p2 = ap_const_lv1_1))) then 
                min_distance_list_2_2_fu_108 <= min_distance_list_2_22_reg_992;
            end if; 
        end if;
    end process;

    min_distance_list_2_3_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                min_distance_list_2_3_fu_104 <= min_distance_list_2_18_fu_824_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln88_fu_366_p2 = ap_const_lv1_1))) then 
                min_distance_list_2_3_fu_104 <= min_distance_list_1_3_reg_987;
            end if; 
        end if;
    end process;

    pos_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                pos_0_reg_230 <= pos_fu_536_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                pos_0_reg_230 <= ap_const_lv32_3E8;
            end if; 
        end if;
    end process;

    r3_0_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                r3_0_reg_242 <= r_1_fu_566_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln102_fu_483_p2 = ap_const_lv1_1))) then 
                r3_0_reg_242 <= ap_const_lv2_3;
            end if; 
        end if;
    end process;

    r_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                r_0_reg_219 <= r_fu_489_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_0_reg_219 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_2_reg_1153 <= i_2_fu_876_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_3_reg_1080 <= i_3_fu_421_p2;
                    zext_ln96_reg_1070(3 downto 0) <= zext_ln96_fu_407_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_4_reg_1166 <= i_4_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln102_fu_483_p2 = ap_const_lv1_1))) then
                icmp_ln118_1_reg_1132 <= icmp_ln118_1_fu_554_p2;
                icmp_ln118_reg_1124 <= icmp_ln118_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_1093 <= j_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                min_distance_list_2_21_reg_1103 <= min_distance_list_2_21_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sub_ln105_reg_1085 <= sub_ln105_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_870_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                vote_list_addr_1_reg_1158 <= sext_ln129_fu_894_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    zext_ln96_reg_1070(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln96_fu_415_p2, ap_CS_fsm_state5, icmp_ln98_fu_449_p2, ap_CS_fsm_state7, icmp_ln102_fu_483_p2, ap_CS_fsm_state8, icmp_ln108_fu_560_p2, ap_CS_fsm_state9, icmp_ln126_fu_870_p2, ap_CS_fsm_state11, icmp_ln136_fu_906_p2, icmp_ln81_fu_324_p2, icmp_ln88_fu_366_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln81_fu_324_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln88_fu_366_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln96_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln98_fu_449_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln102_fu_483_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln108_fu_560_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln126_fu_870_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln136_fu_906_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln105_fu_461_p2 <= std_logic_vector(unsigned(sub_ln105_reg_1085) + unsigned(zext_ln98_fu_445_p1));
    add_ln129_fu_899_p2 <= std_logic_vector(unsigned(vote_list_q0) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln136_fu_906_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln136_fu_906_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln136_fu_906_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln136_fu_906_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state11, icmp_ln136_fu_906_p2, max_vote_0_reg_264, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln136_fu_906_p2 = ap_const_lv1_1))) then 
            ap_return <= max_vote_0_reg_264;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    i_1_fu_372_p2 <= std_logic_vector(unsigned(i1_0_reg_186) + unsigned(ap_const_lv4_1));
    i_2_fu_876_p2 <= std_logic_vector(unsigned(i4_0_reg_253) + unsigned(ap_const_lv2_1));
    i_3_fu_421_p2 <= std_logic_vector(unsigned(label_list_2_21_reg_197) + unsigned(ap_const_lv4_1));
    i_4_fu_912_p2 <= std_logic_vector(unsigned(i5_0_reg_276) + unsigned(ap_const_lv4_1));
    i_fu_330_p2 <= std_logic_vector(unsigned(i_0_reg_175) + unsigned(ap_const_lv2_1));
    icmp_ln102_fu_483_p2 <= "1" when (r_0_reg_219 = ap_const_lv2_3) else "0";
    icmp_ln105_1_fu_522_p2 <= "1" when (signed(tmp_4_fu_512_p4) > signed(ap_const_lv30_0)) else "0";
    icmp_ln105_fu_507_p2 <= "1" when (signed(min_distance_list_2_21_reg_1103) < signed(tmp_3_fu_495_p5)) else "0";
    icmp_ln108_fu_560_p2 <= "1" when (r3_0_reg_242 = ap_const_lv2_0) else "0";
    icmp_ln111_fu_576_p2 <= "1" when (signed(zext_ln111_fu_572_p1) > signed(pos_0_reg_230)) else "0";
    icmp_ln113_1_fu_610_p2 <= "1" when (r3_0_reg_242 = ap_const_lv2_1) else "0";
    icmp_ln113_fu_582_p2 <= "1" when (r3_0_reg_242 = ap_const_lv2_2) else "0";
    icmp_ln116_fu_596_p2 <= "1" when (zext_ln111_fu_572_p1 = pos_0_reg_230) else "0";
    icmp_ln118_1_fu_554_p2 <= "1" when (trunc_ln118_fu_544_p1 = ap_const_lv2_0) else "0";
    icmp_ln118_fu_548_p2 <= "1" when (trunc_ln118_fu_544_p1 = ap_const_lv2_1) else "0";
    icmp_ln126_fu_870_p2 <= "1" when (i4_0_reg_253 = ap_const_lv2_3) else "0";
    icmp_ln136_fu_906_p2 <= "1" when (i5_0_reg_276 = ap_const_lv4_A) else "0";
    icmp_ln139_fu_928_p2 <= "1" when (signed(vote_list_q0) < signed(vote_list_q1)) else "0";
    icmp_ln81_fu_324_p2 <= "1" when (i_0_reg_175 = ap_const_lv2_3) else "0";
    icmp_ln88_fu_366_p2 <= "1" when (i1_0_reg_186 = ap_const_lv4_A) else "0";
    icmp_ln96_fu_415_p2 <= "1" when (label_list_2_21_reg_197 = ap_const_lv4_A) else "0";
    icmp_ln98_fu_449_p2 <= "1" when (j_0_reg_208 = ap_const_lv2_3) else "0";
    j_fu_455_p2 <= std_logic_vector(unsigned(j_0_reg_208) + unsigned(ap_const_lv2_1));
    knn_set_address0 <= zext_ln105_fu_470_p1(5 - 1 downto 0);

    knn_set_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            knn_set_ce0 <= ap_const_logic_1;
        else 
            knn_set_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    label_list_0_0_load_reg_997 <= ap_const_lv32_9;
    label_list_1_0_load_reg_1002 <= ap_const_lv32_9;
    label_list_2_0_load_reg_1007 <= ap_const_lv32_9;
    label_list_2_10_fu_718_p3 <= 
        label_list_2_2_fu_120 when (icmp_ln118_1_reg_1132(0) = '1') else 
        label_list_2_9_fu_712_p3;
    label_list_2_11_fu_725_p3 <= 
        zext_ln96_reg_1070 when (icmp_ln118_reg_1124(0) = '1') else 
        label_list_2_3_fu_116;
    label_list_2_12_fu_731_p3 <= 
        label_list_2_3_fu_116 when (icmp_ln118_1_reg_1132(0) = '1') else 
        label_list_2_11_fu_725_p3;
    label_list_2_13_fu_738_p3 <= 
        zext_ln96_reg_1070 when (icmp_ln118_1_reg_1132(0) = '1') else 
        label_list_2_1_fu_112;
    label_list_2_14_fu_744_p3 <= 
        label_list_2_10_fu_718_p3 when (icmp_ln116_fu_596_p2(0) = '1') else 
        label_list_2_2_fu_120;
    label_list_2_15_fu_752_p3 <= 
        label_list_2_12_fu_731_p3 when (icmp_ln116_fu_596_p2(0) = '1') else 
        label_list_2_3_fu_116;
    label_list_2_16_fu_760_p3 <= 
        label_list_2_13_fu_738_p3 when (icmp_ln116_fu_596_p2(0) = '1') else 
        label_list_2_1_fu_112;
    label_list_2_17_fu_792_p3 <= 
        label_list_2_5_fu_688_p3 when (icmp_ln111_fu_576_p2(0) = '1') else 
        label_list_2_14_fu_744_p3;
    label_list_2_18_fu_800_p3 <= 
        label_list_2_6_fu_696_p3 when (icmp_ln111_fu_576_p2(0) = '1') else 
        label_list_2_15_fu_752_p3;
    label_list_2_19_fu_808_p3 <= 
        label_list_2_7_fu_704_p3 when (icmp_ln111_fu_576_p2(0) = '1') else 
        label_list_2_16_fu_760_p3;
    label_list_2_20_fu_640_p3 <= 
        label_list_2_1_fu_112 when (icmp_ln113_fu_582_p2(0) = '1') else 
        label_list_2_3_fu_116;
    label_list_2_5_fu_688_p3 <= 
        label_list_2_2_fu_120 when (icmp_ln113_1_fu_610_p2(0) = '1') else 
        label_list_2_fu_680_p3;
    label_list_2_6_fu_696_p3 <= 
        label_list_2_3_fu_116 when (icmp_ln113_1_fu_610_p2(0) = '1') else 
        label_list_2_20_fu_640_p3;
    label_list_2_7_fu_704_p3 <= 
        label_list_2_20_fu_640_p3 when (icmp_ln113_1_fu_610_p2(0) = '1') else 
        label_list_2_1_fu_112;
    label_list_2_9_fu_712_p3 <= 
        label_list_2_2_fu_120 when (icmp_ln118_reg_1124(0) = '1') else 
        zext_ln96_reg_1070;
    label_list_2_fu_680_p3 <= 
        label_list_2_2_fu_120 when (icmp_ln113_fu_582_p2(0) = '1') else 
        label_list_2_3_fu_116;
    max_vote_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_reg_276),8));
    min_distance_list_0_3_reg_982 <= ap_const_lv32_100;
    min_distance_list_1_3_reg_987 <= ap_const_lv32_100;
    min_distance_list_2_10_fu_654_p3 <= 
        min_distance_list_2_2_fu_108 when (icmp_ln118_1_reg_1132(0) = '1') else 
        min_distance_list_2_9_fu_648_p3;
    min_distance_list_2_11_fu_661_p3 <= 
        min_distance_list_2_21_reg_1103 when (icmp_ln118_reg_1124(0) = '1') else 
        min_distance_list_2_3_fu_104;
    min_distance_list_2_12_fu_667_p3 <= 
        min_distance_list_2_3_fu_104 when (icmp_ln118_1_reg_1132(0) = '1') else 
        min_distance_list_2_11_fu_661_p3;
    min_distance_list_2_13_fu_674_p3 <= 
        min_distance_list_2_21_reg_1103 when (icmp_ln118_1_reg_1132(0) = '1') else 
        min_distance_list_2_1_fu_100;
    min_distance_list_2_14_fu_768_p3 <= 
        min_distance_list_2_10_fu_654_p3 when (icmp_ln116_fu_596_p2(0) = '1') else 
        min_distance_list_2_2_fu_108;
    min_distance_list_2_15_fu_776_p3 <= 
        min_distance_list_2_12_fu_667_p3 when (icmp_ln116_fu_596_p2(0) = '1') else 
        min_distance_list_2_3_fu_104;
    min_distance_list_2_16_fu_784_p3 <= 
        min_distance_list_2_13_fu_674_p3 when (icmp_ln116_fu_596_p2(0) = '1') else 
        min_distance_list_2_1_fu_100;
    min_distance_list_2_17_fu_816_p3 <= 
        min_distance_list_2_5_fu_616_p3 when (icmp_ln111_fu_576_p2(0) = '1') else 
        min_distance_list_2_14_fu_768_p3;
    min_distance_list_2_18_fu_824_p3 <= 
        min_distance_list_2_6_fu_624_p3 when (icmp_ln111_fu_576_p2(0) = '1') else 
        min_distance_list_2_15_fu_776_p3;
    min_distance_list_2_19_fu_832_p3 <= 
        min_distance_list_2_7_fu_632_p3 when (icmp_ln111_fu_576_p2(0) = '1') else 
        min_distance_list_2_16_fu_784_p3;
    min_distance_list_2_20_fu_588_p3 <= 
        min_distance_list_2_1_fu_100 when (icmp_ln113_fu_582_p2(0) = '1') else 
        min_distance_list_2_3_fu_104;
        min_distance_list_2_21_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(knn_set_q0),32));

    min_distance_list_2_22_reg_992 <= ap_const_lv32_100;
    min_distance_list_2_5_fu_616_p3 <= 
        min_distance_list_2_2_fu_108 when (icmp_ln113_1_fu_610_p2(0) = '1') else 
        min_distance_list_2_fu_602_p3;
    min_distance_list_2_6_fu_624_p3 <= 
        min_distance_list_2_3_fu_104 when (icmp_ln113_1_fu_610_p2(0) = '1') else 
        min_distance_list_2_20_fu_588_p3;
    min_distance_list_2_7_fu_632_p3 <= 
        min_distance_list_2_20_fu_588_p3 when (icmp_ln113_1_fu_610_p2(0) = '1') else 
        min_distance_list_2_1_fu_100;
    min_distance_list_2_9_fu_648_p3 <= 
        min_distance_list_2_2_fu_108 when (icmp_ln118_reg_1124(0) = '1') else 
        min_distance_list_2_21_reg_1103;
    min_distance_list_2_fu_602_p3 <= 
        min_distance_list_2_2_fu_108 when (icmp_ln113_fu_582_p2(0) = '1') else 
        min_distance_list_2_3_fu_104;
    phitmp_fu_528_p3 <= 
        zext_ln102_fu_479_p1 when (icmp_ln105_1_fu_522_p2(0) = '1') else 
        pos_0_reg_230;
    pos_fu_536_p3 <= 
        phitmp_fu_528_p3 when (icmp_ln105_fu_507_p2(0) = '1') else 
        pos_0_reg_230;
    r_1_fu_566_p2 <= std_logic_vector(unsigned(r3_0_reg_242) + unsigned(ap_const_lv2_3));
    r_fu_489_p2 <= std_logic_vector(unsigned(r_0_reg_219) + unsigned(ap_const_lv2_1));
    select_ln139_fu_938_p3 <= 
        max_vote_0_reg_264 when (icmp_ln139_fu_928_p2(0) = '1') else 
        max_vote_fu_934_p1;
        sext_ln105_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln105_fu_461_p2),32));

        sext_ln129_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_882_p5),64));

    shl_ln_fu_427_p3 <= (label_list_2_21_reg_197 & ap_const_lv2_0);
    sub_ln105_fu_439_p2 <= std_logic_vector(unsigned(zext_ln105_1_fu_435_p1) - unsigned(zext_ln96_1_fu_411_p1));
    tmp_4_fu_512_p4 <= pos_0_reg_230(31 downto 2);
    trunc_ln118_fu_544_p1 <= pos_0_reg_230(2 - 1 downto 0);

    vote_list_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, vote_list_addr_1_reg_1158, ap_CS_fsm_state11, ap_CS_fsm_state10, zext_ln91_fu_378_p1, sext_ln129_fu_894_p1, zext_ln139_1_fu_918_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vote_list_address0 <= zext_ln139_1_fu_918_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vote_list_address0 <= vote_list_addr_1_reg_1158;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vote_list_address0 <= sext_ln129_fu_894_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vote_list_address0 <= zext_ln91_fu_378_p1(4 - 1 downto 0);
        else 
            vote_list_address0 <= "XXXX";
        end if; 
    end process;

    vote_list_address1 <= zext_ln139_fu_923_p1(4 - 1 downto 0);

    vote_list_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            vote_list_ce0 <= ap_const_logic_1;
        else 
            vote_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vote_list_ce1_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vote_list_ce1 <= ap_const_logic_1;
        else 
            vote_list_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vote_list_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, add_ln129_fu_899_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vote_list_d0 <= add_ln129_fu_899_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vote_list_d0 <= ap_const_lv32_0;
        else 
            vote_list_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vote_list_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln88_fu_366_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln88_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            vote_list_we0 <= ap_const_logic_1;
        else 
            vote_list_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln102_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_219),32));
    zext_ln105_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_427_p3),7));
    zext_ln105_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln105_fu_466_p1),64));
    zext_ln111_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_fu_566_p2),32));
    zext_ln139_1_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_reg_276),64));
    zext_ln139_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_vote_0_reg_264),64));
    zext_ln91_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_186),64));
    zext_ln96_1_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(label_list_2_21_reg_197),7));
    zext_ln96_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(label_list_2_21_reg_197),32));
    zext_ln98_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_208),7));
end behav;
