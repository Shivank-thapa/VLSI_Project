-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DigitRec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array4_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    array4_ce0 : OUT STD_LOGIC;
    array4_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
    global_results_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    global_results_ce0 : OUT STD_LOGIC;
    global_results_we0 : OUT STD_LOGIC;
    global_results_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    num_training : IN STD_LOGIC_VECTOR (31 downto 0);
    num_test : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DigitRec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DigitRec,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku5p-ffvb676-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.473594,HLS_SYN_LAT=-1898544292,HLS_SYN_TPT=none,HLS_SYN_MEM=289,HLS_SYN_DSP=4,HLS_SYN_FF=1198,HLS_SYN_LUT=2164,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv11_100 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv15_4650 : STD_LOGIC_VECTOR (14 downto 0) := "100011001010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv16_4650 : STD_LOGIC_VECTOR (15 downto 0) := "0100011001010000";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv15_708 : STD_LOGIC_VECTOR (14 downto 0) := "000011100001000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal training_set_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal training_set_V_ce0 : STD_LOGIC;
    signal training_set_V_we0 : STD_LOGIC;
    signal training_set_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal test_set_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal test_set_V_ce0 : STD_LOGIC;
    signal test_set_V_we0 : STD_LOGIC;
    signal test_set_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal results_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal results_ce0 : STD_LOGIC;
    signal results_we0 : STD_LOGIC;
    signal results_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_709_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_reg_1479 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln168_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_reg_1484 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln165_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_729_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_1497 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln172_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iter_cnt_fu_814_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal iter_cnt_reg_1507 : STD_LOGIC_VECTOR (28 downto 0);
    signal t_fu_834_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal t_reg_1515 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln184_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_reg_1520 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln181_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal test_instance_V_reg_1530 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_fu_851_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln193_fu_862_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln193_reg_1543 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln193_1_fu_866_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln193_1_reg_1548 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln193_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_reg_1553 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_876_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_4_reg_1557 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_892_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1565 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln195_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1357_fu_916_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1357_reg_1575 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_fu_926_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal ret_V_reg_1584 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_5_fu_941_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal cnt_fu_958_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln17_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_fu_964_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln45_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln45_reg_1607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal k_fu_978_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1615 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln42_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln195_fu_1022_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln43_fu_1038_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal select_ln43_1_fu_1046_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_fu_1059_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_7_fu_1091_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_9_fu_1118_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_reg_1662 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sub_ln100_fu_1136_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln100_reg_1667 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln94_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln111_fu_1142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln111_reg_1672 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_1156_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_1680 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln95_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln100_1_fu_1176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln100_1_reg_1690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln98_fu_1180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln98_reg_1696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal r_fu_1190_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_1704 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln98_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal array3_addr_7_reg_1714 : STD_LOGIC_VECTOR (3 downto 0);
    signal array3_addr_8_reg_1719 : STD_LOGIC_VECTOR (3 downto 0);
    signal pos_fu_1249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal r_1_fu_1263_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_reg_1732 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln104_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_1739 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_1344_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_8_reg_1759 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln118_fu_1338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal array3_addr_4_reg_1769 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_10_fu_1393_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_reg_1778 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln127_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln129_fu_1435_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_3_fu_1452_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_1801 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln218_fu_1458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_reg_1806 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln215_fu_1447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal array3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal array3_ce0 : STD_LOGIC;
    signal array3_we0 : STD_LOGIC;
    signal array3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal array3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal array3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal array3_ce1 : STD_LOGIC;
    signal array3_we1 : STD_LOGIC;
    signal array3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal array3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal knn_set_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal knn_set_ce0 : STD_LOGIC;
    signal knn_set_we0 : STD_LOGIC;
    signal knn_set_d0 : STD_LOGIC_VECTOR (10 downto 0);
    signal knn_set_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_reg_441 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_452 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t_0_reg_464 : STD_LOGIC_VECTOR (30 downto 0);
    signal i2_0_reg_475 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln187_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_0_reg_486 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln205_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_497 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_0_reg_509 : STD_LOGIC_VECTOR (3 downto 0);
    signal dist_reg_520 : STD_LOGIC_VECTOR (8 downto 0);
    signal bvh_d_index_reg_532 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_dist_0_i_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_dist_id_0_i_reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_dist_id_reg_567 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_i_reg_578 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln81_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_0_i_reg_589 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln87_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_0_i_reg_600 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_i_reg_611 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_0_i_reg_622 : STD_LOGIC_VECTOR (1 downto 0);
    signal pos_0_i_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal r3_0_i_reg_645 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i4_0_i_reg_656 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal max_vote_reg_667 : STD_LOGIC_VECTOR (7 downto 0);
    signal i5_0_i_reg_680 : STD_LOGIC_VECTOR (3 downto 0);
    signal i4_0_reg_692 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal sext_ln321_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln190_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_1_fu_993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln51_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln50_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln83_fu_1065_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_1080_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_fu_1103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_1171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_1_fu_1196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_1201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln111_fu_1216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln107_fu_1291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln108_1_fu_1306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_fu_1311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln108_2_fu_1328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_fu_1360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln120_fu_1375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_fu_1405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln129_fu_1420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_1017_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln109_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln108_fu_1333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln120_fu_1380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln172_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln321_fu_735_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln321_fu_739_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln178_fu_750_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln178_fu_753_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln178_fu_753_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_7_fu_765_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln178_fu_759_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_7_fu_765_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_772_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_9_fu_782_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln178_fu_792_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln178_1_fu_800_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln178_1_fu_806_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln181_fu_825_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln199_fu_898_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_908_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1357_fu_882_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_1_fu_931_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_947_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_fu_954_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln43_fu_984_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln43_fu_988_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln51_fu_1003_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln51_fu_1007_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal max_dist_fu_1028_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln83_1_fu_1070_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln84_fu_1074_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln89_fu_1097_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_fu_1124_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln100_2_fu_1132_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln94_fu_1108_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln95_fu_1146_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln100_fu_1162_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln100_fu_1167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln110_fu_1206_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln111_fu_1210_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_1226_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln100_1_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_i_fu_1242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln106_fu_1269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln107_fu_1285_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln107_1_fu_1296_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln108_fu_1300_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln107_1_fu_1315_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln108_1_fu_1322_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln108_fu_1318_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln120_fu_1350_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln120_1_fu_1354_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln120_fu_1365_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln120_2_fu_1369_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln129_fu_1399_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln129_fu_1410_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln129_1_fu_1414_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln129_fu_1425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_vote_1_fu_1431_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_fu_1443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);

    component DigitRec_trainingbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component DigitRec_test_set_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component DigitRec_results IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component DigitRec_array3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_knn_set IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (10 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    training_set_V_U : component DigitRec_trainingbkb
    generic map (
        DataWidth => 256,
        AddressRange => 18000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_set_V_address0,
        ce0 => training_set_V_ce0,
        we0 => training_set_V_we0,
        d0 => array4_q0,
        q0 => training_set_V_q0);

    test_set_V_U : component DigitRec_test_set_V
    generic map (
        DataWidth => 256,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => test_set_V_address0,
        ce0 => test_set_V_ce0,
        we0 => test_set_V_we0,
        d0 => array4_q0,
        q0 => test_set_V_q0);

    results_U : component DigitRec_results
    generic map (
        DataWidth => 8,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => results_address0,
        ce0 => results_ce0,
        we0 => results_we0,
        d0 => max_vote_reg_667,
        q0 => results_q0);

    array3_U : component DigitRec_array3
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => array3_address0,
        ce0 => array3_ce0,
        we0 => array3_we0,
        d0 => array3_d0,
        q0 => array3_q0,
        address1 => array3_address1,
        ce1 => array3_ce1,
        we1 => array3_we1,
        d1 => array3_d1,
        q1 => array3_q1);

    knn_set_U : component DigitRec_knn_set
    generic map (
        DataWidth => 11,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => knn_set_address0,
        ce0 => knn_set_ce0,
        we0 => knn_set_we0,
        d0 => knn_set_d0,
        q0 => knn_set_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bvh_d_index_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_935_p2 = ap_const_lv1_0))) then 
                bvh_d_index_reg_532 <= i_5_fu_941_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                bvh_d_index_reg_532 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    dist_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_935_p2 = ap_const_lv1_0))) then 
                dist_reg_520 <= cnt_fu_958_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                dist_reg_520 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i1_0_i_reg_589_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln81_fu_1053_p2 = ap_const_lv1_1))) then 
                i1_0_i_reg_589 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln87_fu_1085_p2 = ap_const_lv1_0))) then 
                i1_0_i_reg_589 <= i_7_fu_1091_p2;
            end if; 
        end if;
    end process;

    i1_0_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln165_fu_703_p2 = ap_const_lv1_1))) then 
                i1_0_reg_452 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_0_reg_452 <= i_1_reg_1497;
            end if; 
        end if;
    end process;

    i2_0_i_reg_600_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln87_fu_1085_p2 = ap_const_lv1_1))) then 
                i2_0_i_reg_600 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln95_fu_1150_p2 = ap_const_lv1_1))) then 
                i2_0_i_reg_600 <= i_9_reg_1662;
            end if; 
        end if;
    end process;

    i2_0_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln187_fu_845_p2 = ap_const_lv1_0))) then 
                i2_0_reg_475 <= i_2_fu_851_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i2_0_reg_475 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i3_0_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln187_fu_845_p2 = ap_const_lv1_1))) then 
                i3_0_reg_486 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln195_fu_886_p2 = ap_const_lv1_1) and (icmp_ln205_fu_922_p2 = ap_const_lv1_0) and (icmp_ln193_reg_1553 = ap_const_lv1_0))) then 
                i3_0_reg_486 <= i_4_reg_1557;
            end if; 
        end if;
    end process;

    i4_0_i_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln94_fu_1112_p2 = ap_const_lv1_1))) then 
                i4_0_i_reg_656 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i4_0_i_reg_656 <= i_8_reg_1759;
            end if; 
        end if;
    end process;

    i4_0_reg_692_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln181_fu_829_p2 = ap_const_lv1_0))) then 
                i4_0_reg_692 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i4_0_reg_692 <= i_3_reg_1801;
            end if; 
        end if;
    end process;

    i5_0_i_reg_680_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln118_fu_1338_p2 = ap_const_lv1_1))) then 
                i5_0_i_reg_680 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i5_0_i_reg_680 <= i_10_reg_1778;
            end if; 
        end if;
    end process;

    i_0_i_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln81_fu_1053_p2 = ap_const_lv1_0))) then 
                i_0_i_reg_578 <= i_6_fu_1059_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln193_reg_1553 = ap_const_lv1_1) or ((icmp_ln205_fu_922_p2 = ap_const_lv1_1) and (icmp_ln195_fu_886_p2 = ap_const_lv1_1))))) then 
                i_0_i_reg_578 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_0_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_441 <= i_reg_1479;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_441 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln193_fu_870_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_497 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_972_p2 = ap_const_lv1_1))) then 
                indvars_iv_reg_497 <= add_ln195_fu_1022_p2;
            end if; 
        end if;
    end process;

    j_0_i_reg_611_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_1))) then 
                j_0_i_reg_611 <= j_1_reg_1680;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln94_fu_1112_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_611 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln193_fu_870_p2 = ap_const_lv1_0))) then 
                j_0_reg_509 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_972_p2 = ap_const_lv1_1))) then 
                j_0_reg_509 <= j_reg_1565;
            end if; 
        end if;
    end process;

    max_dist_0_i_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_935_p2 = ap_const_lv1_1))) then 
                max_dist_0_i_reg_543 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                max_dist_0_i_reg_543 <= select_ln43_fu_1038_p3;
            end if; 
        end if;
    end process;

    max_dist_id_0_i_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_935_p2 = ap_const_lv1_1))) then 
                max_dist_id_0_i_reg_555 <= ap_const_lv32_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                max_dist_id_0_i_reg_555 <= select_ln43_1_fu_1046_p3;
            end if; 
        end if;
    end process;

    max_dist_id_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_935_p2 = ap_const_lv1_1))) then 
                max_dist_id_reg_567 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                max_dist_id_reg_567 <= k_reg_1615;
            end if; 
        end if;
    end process;

    max_vote_reg_667_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln118_fu_1338_p2 = ap_const_lv1_1))) then 
                max_vote_reg_667 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                max_vote_reg_667 <= select_ln129_fu_1435_p3;
            end if; 
        end if;
    end process;

    pos_0_i_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                pos_0_i_reg_633 <= pos_fu_1249_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                pos_0_i_reg_633 <= ap_const_lv32_3E8;
            end if; 
        end if;
    end process;

    r3_0_i_reg_645_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln98_fu_1184_p2 = ap_const_lv1_1))) then 
                r3_0_i_reg_645 <= ap_const_lv2_3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                r3_0_i_reg_645 <= r_1_reg_1732;
            end if; 
        end if;
    end process;

    r_0_i_reg_622_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                r_0_i_reg_622 <= r_reg_1704;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                r_0_i_reg_622 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    t_0_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln127_fu_1387_p2 = ap_const_lv1_1))) then 
                t_0_reg_464 <= t_reg_1515;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln172_fu_724_p2 = ap_const_lv1_0))) then 
                t_0_reg_464 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                array3_addr_4_reg_1769 <= sext_ln120_fu_1375_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln98_fu_1184_p2 = ap_const_lv1_1))) then
                array3_addr_7_reg_1714 <= zext_ln110_fu_1201_p1(4 - 1 downto 0);
                array3_addr_8_reg_1719 <= sext_ln111_fu_1216_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_10_reg_1778 <= i_10_fu_1393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_1497 <= i_1_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                i_3_reg_1801 <= i_3_fu_1452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_4_reg_1557 <= i_4_fu_876_p2;
                icmp_ln193_reg_1553 <= icmp_ln193_fu_870_p2;
                    zext_ln193_1_reg_1548(10 downto 0) <= zext_ln193_1_fu_866_p1(10 downto 0);
                    zext_ln193_reg_1543(10 downto 0) <= zext_ln193_fu_862_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_8_reg_1759 <= i_8_fu_1344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_9_reg_1662 <= i_9_fu_1118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1479 <= i_fu_709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0))) then
                icmp_ln106_reg_1739 <= icmp_ln106_fu_1273_p2;
                r_1_reg_1732 <= r_1_fu_1263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln172_fu_724_p2 = ap_const_lv1_0))) then
                iter_cnt_reg_1507 <= iter_cnt_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                j_1_reg_1680 <= j_1_fu_1156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln193_reg_1553 = ap_const_lv1_0))) then
                j_reg_1565 <= j_fu_892_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                k_reg_1615 <= k_fu_978_p2;
                    zext_ln45_reg_1607(1 downto 0) <= zext_ln45_fu_968_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                r_reg_1704 <= r_fu_1190_p2;
                    zext_ln98_reg_1696(1 downto 0) <= zext_ln98_fu_1180_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ret_V_reg_1584 <= ret_V_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                sext_ln100_1_reg_1690 <= sext_ln100_1_fu_1176_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln94_fu_1112_p2 = ap_const_lv1_0))) then
                sub_ln100_reg_1667 <= sub_ln100_fu_1136_p2;
                    zext_ln111_reg_1672(3 downto 0) <= zext_ln111_fu_1142_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln195_fu_886_p2 = ap_const_lv1_0) and (icmp_ln193_reg_1553 = ap_const_lv1_0))) then
                sub_ln1357_reg_1575 <= sub_ln1357_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                t_reg_1515 <= t_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                test_instance_V_reg_1530 <= test_set_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln165_fu_703_p2 = ap_const_lv1_0))) then
                    zext_ln168_reg_1484(14 downto 0) <= zext_ln168_fu_715_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln181_fu_829_p2 = ap_const_lv1_1))) then
                    zext_ln184_reg_1520(30 downto 0) <= zext_ln184_fu_840_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln215_fu_1447_p2 = ap_const_lv1_1))) then
                    zext_ln218_reg_1806(30 downto 0) <= zext_ln218_fu_1458_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_935_p2 = ap_const_lv1_1))) then
                    zext_ln35_reg_1602(8 downto 0) <= zext_ln35_fu_964_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln168_reg_1484(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln184_reg_1520(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln193_reg_1543(14 downto 11) <= "0000";
    zext_ln193_1_reg_1548(28 downto 11) <= "000000000000000000";
    zext_ln35_reg_1602(31 downto 9) <= "00000000000000000000000";
    zext_ln45_reg_1607(31 downto 2) <= "000000000000000000000000000000";
    zext_ln111_reg_1672(31 downto 4) <= "0000000000000000000000000000";
    zext_ln98_reg_1696(31 downto 2) <= "000000000000000000000000000000";
    zext_ln218_reg_1806(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln165_fu_703_p2, ap_CS_fsm_state4, icmp_ln172_fu_724_p2, ap_CS_fsm_state6, icmp_ln181_fu_829_p2, ap_CS_fsm_state8, icmp_ln193_reg_1553, ap_CS_fsm_state10, icmp_ln195_fu_886_p2, ap_CS_fsm_state12, icmp_ln17_fu_935_p2, ap_CS_fsm_state13, icmp_ln42_fu_972_p2, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln94_fu_1112_p2, ap_CS_fsm_state18, icmp_ln95_fu_1150_p2, ap_CS_fsm_state20, icmp_ln98_fu_1184_p2, ap_CS_fsm_state22, icmp_ln104_fu_1257_p2, ap_CS_fsm_state24, icmp_ln118_fu_1338_p2, ap_CS_fsm_state27, icmp_ln127_fu_1387_p2, ap_CS_fsm_state29, icmp_ln215_fu_1447_p2, icmp_ln187_fu_845_p2, icmp_ln205_fu_922_p2, icmp_ln81_fu_1053_p2, icmp_ln87_fu_1085_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln165_fu_703_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln172_fu_724_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln181_fu_829_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln187_fu_845_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln193_reg_1553 = ap_const_lv1_1) or ((icmp_ln205_fu_922_p2 = ap_const_lv1_1) and (icmp_ln195_fu_886_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln195_fu_886_p2 = ap_const_lv1_1) and (icmp_ln205_fu_922_p2 = ap_const_lv1_0) and (icmp_ln193_reg_1553 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_935_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_972_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln81_fu_1053_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln87_fu_1085_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln94_fu_1112_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln95_fu_1150_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln98_fu_1184_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln118_fu_1338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln127_fu_1387_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln215_fu_1447_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_1162_p2 <= std_logic_vector(unsigned(sub_ln100_reg_1667) + unsigned(zext_ln95_fu_1146_p1));
    add_ln108_1_fu_1322_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(zext_ln107_1_fu_1315_p1));
    add_ln108_fu_1300_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(sext_ln107_1_fu_1296_p1));
    add_ln111_fu_1210_p2 <= std_logic_vector(unsigned(ap_const_lv6_3) + unsigned(trunc_ln110_fu_1206_p1));
    add_ln120_1_fu_1354_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(zext_ln120_fu_1350_p1));
    add_ln120_2_fu_1369_p2 <= std_logic_vector(unsigned(ap_const_lv6_6) + unsigned(trunc_ln120_fu_1365_p1));
    add_ln120_fu_1380_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(array3_q1));
    add_ln129_1_fu_1414_p2 <= std_logic_vector(unsigned(ap_const_lv6_6) + unsigned(trunc_ln129_fu_1410_p1));
    add_ln129_fu_1399_p2 <= std_logic_vector(unsigned(ap_const_lv4_6) + unsigned(i5_0_i_reg_680));
    add_ln195_fu_1022_p2 <= std_logic_vector(unsigned(indvars_iv_reg_497) + unsigned(ap_const_lv15_708));
    add_ln199_fu_898_p2 <= std_logic_vector(unsigned(indvars_iv_reg_497) + unsigned(zext_ln193_reg_1543));
    add_ln321_fu_739_p2 <= std_logic_vector(unsigned(ap_const_lv16_4650) + unsigned(trunc_ln321_fu_735_p1));
    add_ln43_fu_988_p2 <= std_logic_vector(unsigned(sub_ln1357_reg_1575) + unsigned(zext_ln43_fu_984_p1));
    add_ln51_fu_1007_p2 <= std_logic_vector(unsigned(trunc_ln51_fu_1003_p1) + unsigned(sub_ln1357_reg_1575));
    add_ln84_fu_1074_p2 <= std_logic_vector(unsigned(zext_ln83_1_fu_1070_p1) + unsigned(ap_const_lv3_3));
    add_ln89_fu_1097_p2 <= std_logic_vector(unsigned(i1_0_i_reg_589) + unsigned(ap_const_lv4_6));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state29, icmp_ln215_fu_1447_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln215_fu_1447_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29, icmp_ln215_fu_1447_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln215_fu_1447_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    array3_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, array3_addr_7_reg_1714, ap_CS_fsm_state22, icmp_ln104_fu_1257_p2, icmp_ln106_fu_1273_p2, ap_CS_fsm_state24, array3_addr_4_reg_1769, ap_CS_fsm_state27, ap_CS_fsm_state23, ap_CS_fsm_state26, zext_ln83_fu_1065_p1, zext_ln89_fu_1103_p1, sext_ln107_fu_1291_p1, zext_ln107_fu_1311_p1, zext_ln120_1_fu_1360_p1, sext_ln129_fu_1420_p1, icmp_ln109_fu_1279_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            array3_address0 <= sext_ln129_fu_1420_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            array3_address0 <= array3_addr_4_reg_1769;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            array3_address0 <= zext_ln120_1_fu_1360_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            array3_address0 <= zext_ln107_fu_1311_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_1) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0))) then 
            array3_address0 <= sext_ln107_fu_1291_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln109_fu_1279_p2 = ap_const_lv1_1) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0))) then 
            array3_address0 <= array3_addr_7_reg_1714;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array3_address0 <= zext_ln89_fu_1103_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array3_address0 <= zext_ln83_fu_1065_p1(4 - 1 downto 0);
        else 
            array3_address0 <= "XXXX";
        end if; 
    end process;


    array3_address1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state20, array3_addr_8_reg_1719, ap_CS_fsm_state22, icmp_ln104_fu_1257_p2, icmp_ln106_fu_1273_p2, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state23, zext_ln84_fu_1080_p1, zext_ln100_1_fu_1196_p1, zext_ln108_1_fu_1306_p1, zext_ln108_2_fu_1328_p1, sext_ln120_fu_1375_p1, zext_ln129_fu_1405_p1, icmp_ln109_fu_1279_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            array3_address1 <= zext_ln129_fu_1405_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            array3_address1 <= sext_ln120_fu_1375_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            array3_address1 <= zext_ln108_2_fu_1328_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_1) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0))) then 
            array3_address1 <= zext_ln108_1_fu_1306_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln109_fu_1279_p2 = ap_const_lv1_1) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0))) then 
            array3_address1 <= array3_addr_8_reg_1719;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            array3_address1 <= zext_ln100_1_fu_1196_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array3_address1 <= zext_ln84_fu_1080_p1(4 - 1 downto 0);
        else 
            array3_address1 <= "XXXX";
        end if; 
    end process;


    array3_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state22, icmp_ln104_fu_1257_p2, icmp_ln106_fu_1273_p2, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_CS_fsm_state23, ap_CS_fsm_state26, icmp_ln109_fu_1279_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln109_fu_1279_p2 = ap_const_lv1_1) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_1) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0)))) then 
            array3_ce0 <= ap_const_logic_1;
        else 
            array3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array3_ce1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state22, icmp_ln104_fu_1257_p2, icmp_ln106_fu_1273_p2, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state23, icmp_ln109_fu_1279_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln109_fu_1279_p2 = ap_const_lv1_1) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_1) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0)))) then 
            array3_ce1 <= ap_const_logic_1;
        else 
            array3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array3_d0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, sext_ln100_1_reg_1690, ap_CS_fsm_state22, icmp_ln104_fu_1257_p2, icmp_ln106_fu_1273_p2, array3_q0, ap_CS_fsm_state23, ap_CS_fsm_state26, icmp_ln109_fu_1279_p2, add_ln120_fu_1380_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            array3_d0 <= add_ln120_fu_1380_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            array3_d0 <= array3_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln109_fu_1279_p2 = ap_const_lv1_1) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0))) then 
            array3_d0 <= sext_ln100_1_reg_1690;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array3_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array3_d0 <= ap_const_lv32_100;
        else 
            array3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array3_d1_assign_proc : process(ap_CS_fsm_state15, zext_ln111_reg_1672, ap_CS_fsm_state22, icmp_ln104_fu_1257_p2, icmp_ln106_fu_1273_p2, ap_CS_fsm_state23, icmp_ln109_fu_1279_p2, zext_ln108_fu_1333_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            array3_d1 <= zext_ln108_fu_1333_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln109_fu_1279_p2 = ap_const_lv1_1) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0))) then 
            array3_d1 <= zext_ln111_reg_1672;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array3_d1 <= ap_const_lv32_9;
        else 
            array3_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array3_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state22, icmp_ln104_fu_1257_p2, icmp_ln106_fu_1273_p2, icmp_ln106_reg_1739, icmp_ln81_fu_1053_p2, icmp_ln87_fu_1085_p2, ap_CS_fsm_state23, ap_CS_fsm_state26, icmp_ln109_fu_1279_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln106_reg_1739 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln109_fu_1279_p2 = ap_const_lv1_1) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln87_fu_1085_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln81_fu_1053_p2 = ap_const_lv1_0)))) then 
            array3_we0 <= ap_const_logic_1;
        else 
            array3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array3_we1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state22, icmp_ln104_fu_1257_p2, icmp_ln106_fu_1273_p2, icmp_ln106_reg_1739, icmp_ln81_fu_1053_p2, ap_CS_fsm_state23, icmp_ln109_fu_1279_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln106_reg_1739 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln109_fu_1279_p2 = ap_const_lv1_1) and (icmp_ln106_fu_1273_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1257_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln81_fu_1053_p2 = ap_const_lv1_0)))) then 
            array3_we1 <= ap_const_logic_1;
        else 
            array3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    array4_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln168_fu_715_p1, ap_CS_fsm_state4, sext_ln321_fu_745_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array4_address0 <= sext_ln321_fu_745_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array4_address0 <= zext_ln168_fu_715_p1(15 - 1 downto 0);
        else 
            array4_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    array4_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            array4_ce0 <= ap_const_logic_1;
        else 
            array4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cnt_fu_958_p2 <= std_logic_vector(unsigned(zext_ln18_fu_954_p1) + unsigned(dist_reg_520));
    global_results_address0 <= zext_ln218_reg_1806(11 - 1 downto 0);

    global_results_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            global_results_ce0 <= ap_const_logic_1;
        else 
            global_results_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    global_results_d0 <= results_q0;

    global_results_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            global_results_we0 <= ap_const_logic_1;
        else 
            global_results_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_10_fu_1393_p2 <= std_logic_vector(unsigned(i5_0_i_reg_680) + unsigned(ap_const_lv4_1));
    i_1_fu_729_p2 <= std_logic_vector(unsigned(i1_0_reg_452) + unsigned(ap_const_lv31_1));
    i_2_fu_851_p2 <= std_logic_vector(unsigned(i2_0_reg_475) + unsigned(ap_const_lv5_1));
    i_3_fu_1452_p2 <= std_logic_vector(unsigned(i4_0_reg_692) + unsigned(ap_const_lv31_1));
    i_4_fu_876_p2 <= std_logic_vector(unsigned(i3_0_reg_486) + unsigned(ap_const_lv11_1));
    i_5_fu_941_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_532) + unsigned(ap_const_lv9_1));
    i_6_fu_1059_p2 <= std_logic_vector(unsigned(i_0_i_reg_578) + unsigned(ap_const_lv2_1));
    i_7_fu_1091_p2 <= std_logic_vector(unsigned(i1_0_i_reg_589) + unsigned(ap_const_lv4_1));
    i_8_fu_1344_p2 <= std_logic_vector(unsigned(i4_0_i_reg_656) + unsigned(ap_const_lv2_1));
    i_9_fu_1118_p2 <= std_logic_vector(unsigned(i2_0_i_reg_600) + unsigned(ap_const_lv4_1));
    i_fu_709_p2 <= std_logic_vector(unsigned(i_0_reg_441) + unsigned(ap_const_lv15_1));
    icmp_ln100_1_fu_1236_p2 <= "1" when (signed(tmp_10_fu_1226_p4) > signed(ap_const_lv30_0)) else "0";
    icmp_ln100_fu_1221_p2 <= "1" when (signed(sext_ln100_1_reg_1690) < signed(array3_q1)) else "0";
    icmp_ln104_fu_1257_p2 <= "1" when (r3_0_i_reg_645 = ap_const_lv2_0) else "0";
    icmp_ln106_fu_1273_p2 <= "1" when (signed(zext_ln106_fu_1269_p1) > signed(pos_0_i_reg_633)) else "0";
    icmp_ln109_fu_1279_p2 <= "1" when (zext_ln106_fu_1269_p1 = pos_0_i_reg_633) else "0";
    icmp_ln118_fu_1338_p2 <= "1" when (i4_0_i_reg_656 = ap_const_lv2_3) else "0";
    icmp_ln127_fu_1387_p2 <= "1" when (i5_0_i_reg_680 = ap_const_lv4_A) else "0";
    icmp_ln129_fu_1425_p2 <= "1" when (signed(array3_q1) < signed(array3_q0)) else "0";
    icmp_ln165_fu_703_p2 <= "1" when (i_0_reg_441 = ap_const_lv15_4650) else "0";
    icmp_ln172_fu_724_p2 <= "1" when (signed(zext_ln172_fu_720_p1) < signed(num_test)) else "0";
    icmp_ln17_fu_935_p2 <= "1" when (bvh_d_index_reg_532 = ap_const_lv9_100) else "0";
    icmp_ln181_fu_829_p2 <= "1" when (signed(zext_ln181_fu_825_p1) < signed(num_test)) else "0";
    icmp_ln187_fu_845_p2 <= "1" when (i2_0_reg_475 = ap_const_lv5_1E) else "0";
    icmp_ln193_fu_870_p2 <= "1" when (i3_0_reg_486 = ap_const_lv11_708) else "0";
    icmp_ln195_fu_886_p2 <= "1" when (j_0_reg_509 = ap_const_lv4_A) else "0";
    icmp_ln205_fu_922_p2 <= "1" when (zext_ln193_1_reg_1548 = iter_cnt_reg_1507) else "0";
    icmp_ln215_fu_1447_p2 <= "1" when (signed(zext_ln215_fu_1443_p1) < signed(num_test)) else "0";
    icmp_ln42_fu_972_p2 <= "1" when (max_dist_id_reg_567 = ap_const_lv2_3) else "0";
    icmp_ln43_fu_1032_p2 <= "1" when (signed(max_dist_fu_1028_p1) > signed(max_dist_0_i_reg_543)) else "0";
    icmp_ln50_fu_998_p2 <= "1" when (signed(zext_ln35_reg_1602) < signed(max_dist_0_i_reg_543)) else "0";
    icmp_ln81_fu_1053_p2 <= "1" when (i_0_i_reg_578 = ap_const_lv2_3) else "0";
    icmp_ln87_fu_1085_p2 <= "1" when (i1_0_i_reg_589 = ap_const_lv4_A) else "0";
    icmp_ln94_fu_1112_p2 <= "1" when (i2_0_i_reg_600 = ap_const_lv4_A) else "0";
    icmp_ln95_fu_1150_p2 <= "1" when (j_0_i_reg_611 = ap_const_lv2_3) else "0";
    icmp_ln98_fu_1184_p2 <= "1" when (r_0_i_reg_622 = ap_const_lv2_3) else "0";
    iter_cnt_fu_814_p2 <= std_logic_vector(unsigned(select_ln178_1_fu_806_p3) + unsigned(ap_const_lv29_1FFFFFFF));
    j_1_fu_1156_p2 <= std_logic_vector(unsigned(j_0_i_reg_611) + unsigned(ap_const_lv2_1));
    j_fu_892_p2 <= std_logic_vector(unsigned(j_0_reg_509) + unsigned(ap_const_lv4_1));
    k_fu_978_p2 <= std_logic_vector(unsigned(max_dist_id_reg_567) + unsigned(ap_const_lv2_1));

    knn_set_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, icmp_ln42_fu_972_p2, ap_CS_fsm_state18, zext_ln190_fu_857_p1, zext_ln43_1_fu_993_p1, sext_ln51_fu_1012_p1, icmp_ln50_fu_998_p2, zext_ln100_fu_1171_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            knn_set_address0 <= zext_ln100_fu_1171_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln50_fu_998_p2 = ap_const_lv1_1) and (icmp_ln42_fu_972_p2 = ap_const_lv1_1))) then 
            knn_set_address0 <= sext_ln51_fu_1012_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_972_p2 = ap_const_lv1_0))) then 
            knn_set_address0 <= zext_ln43_1_fu_993_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            knn_set_address0 <= zext_ln190_fu_857_p1(5 - 1 downto 0);
        else 
            knn_set_address0 <= "XXXXX";
        end if; 
    end process;


    knn_set_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, icmp_ln42_fu_972_p2, ap_CS_fsm_state18, icmp_ln50_fu_998_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln50_fu_998_p2 = ap_const_lv1_1) and (icmp_ln42_fu_972_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln42_fu_972_p2 = ap_const_lv1_0)))) then 
            knn_set_ce0 <= ap_const_logic_1;
        else 
            knn_set_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    knn_set_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, icmp_ln42_fu_972_p2, icmp_ln50_fu_998_p2, zext_ln51_fu_1017_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln50_fu_998_p2 = ap_const_lv1_1) and (icmp_ln42_fu_972_p2 = ap_const_lv1_1))) then 
            knn_set_d0 <= zext_ln51_fu_1017_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            knn_set_d0 <= ap_const_lv11_100;
        else 
            knn_set_d0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    knn_set_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, icmp_ln42_fu_972_p2, icmp_ln187_fu_845_p2, icmp_ln50_fu_998_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln50_fu_998_p2 = ap_const_lv1_1) and (icmp_ln42_fu_972_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln187_fu_845_p2 = ap_const_lv1_0)))) then 
            knn_set_we0 <= ap_const_logic_1;
        else 
            knn_set_we0 <= ap_const_logic_0;
        end if; 
    end process;

        max_dist_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(knn_set_q0),32));

    max_vote_1_fu_1431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_i_reg_680),8));
    mul_ln178_fu_753_p0 <= sext_ln178_fu_750_p0;
    mul_ln178_fu_753_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln178_fu_753_p0) * signed('0' &ap_const_lv65_19999999A))), 65));
    p_Result_s_fu_947_p3 <= ret_V_reg_1584(to_integer(unsigned(zext_ln35_1_fu_931_p1)) downto to_integer(unsigned(zext_ln35_1_fu_931_p1))) when (to_integer(unsigned(zext_ln35_1_fu_931_p1))>= 0 and to_integer(unsigned(zext_ln35_1_fu_931_p1))<=255) else "-";
    phitmp_i_fu_1242_p3 <= 
        zext_ln98_reg_1696 when (icmp_ln100_1_fu_1236_p2(0) = '1') else 
        pos_0_i_reg_633;
    pos_fu_1249_p3 <= 
        phitmp_i_fu_1242_p3 when (icmp_ln100_fu_1221_p2(0) = '1') else 
        pos_0_i_reg_633;
    r_1_fu_1263_p2 <= std_logic_vector(unsigned(r3_0_i_reg_645) + unsigned(ap_const_lv2_3));
    r_fu_1190_p2 <= std_logic_vector(unsigned(r_0_i_reg_622) + unsigned(ap_const_lv2_1));

    results_address0_assign_proc : process(zext_ln184_reg_1520, ap_CS_fsm_state27, ap_CS_fsm_state29, zext_ln218_fu_1458_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            results_address0 <= zext_ln218_fu_1458_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            results_address0 <= zext_ln184_reg_1520(11 - 1 downto 0);
        else 
            results_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    results_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            results_ce0 <= ap_const_logic_1;
        else 
            results_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    results_we0_assign_proc : process(ap_CS_fsm_state27, icmp_ln127_fu_1387_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln127_fu_1387_p2 = ap_const_lv1_1))) then 
            results_we0 <= ap_const_logic_1;
        else 
            results_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_926_p2 <= (training_set_V_q0 xor test_instance_V_reg_1530);
    select_ln129_fu_1435_p3 <= 
        max_vote_reg_667 when (icmp_ln129_fu_1425_p2(0) = '1') else 
        max_vote_1_fu_1431_p1;
    select_ln178_1_fu_806_p3 <= 
        sub_ln178_1_fu_800_p2 when (tmp_7_fu_765_p3(0) = '1') else 
        tmp_9_fu_782_p4;
    select_ln178_fu_792_p3 <= 
        tmp_8_fu_772_p4 when (tmp_7_fu_765_p3(0) = '1') else 
        tmp_9_fu_782_p4;
    select_ln43_1_fu_1046_p3 <= 
        zext_ln45_reg_1607 when (icmp_ln43_fu_1032_p2(0) = '1') else 
        max_dist_id_0_i_reg_555;
    select_ln43_fu_1038_p3 <= 
        max_dist_fu_1028_p1 when (icmp_ln43_fu_1032_p2(0) = '1') else 
        max_dist_0_i_reg_543;
        sext_ln100_1_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(knn_set_q0),32));

        sext_ln100_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln100_fu_1162_p2),32));

        sext_ln107_1_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln107_fu_1285_p2),3));

        sext_ln107_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln107_fu_1285_p2),64));

        sext_ln111_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln111_fu_1210_p2),64));

        sext_ln120_fu_1375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln120_2_fu_1369_p2),64));

        sext_ln129_fu_1420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln129_1_fu_1414_p2),64));

    sext_ln178_fu_750_p0 <= num_training;
        sext_ln321_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln321_fu_739_p2),64));

        sext_ln51_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln51_fu_1007_p2),64));

    shl_ln1_fu_1124_p3 <= (i2_0_i_reg_600 & ap_const_lv2_0);
    shl_ln_fu_908_p3 <= (j_0_reg_509 & ap_const_lv2_0);
    sub_ln100_fu_1136_p2 <= std_logic_vector(unsigned(zext_ln100_2_fu_1132_p1) - unsigned(zext_ln94_fu_1108_p1));
    sub_ln1357_fu_916_p2 <= std_logic_vector(unsigned(shl_ln_fu_908_p3) - unsigned(zext_ln1357_fu_882_p1));
    sub_ln178_1_fu_800_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(select_ln178_fu_792_p3));
    sub_ln178_fu_759_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln178_fu_753_p2));
    t_fu_834_p2 <= std_logic_vector(unsigned(t_0_reg_464) + unsigned(ap_const_lv31_1));

    test_set_V_address0_assign_proc : process(ap_CS_fsm_state6, zext_ln184_fu_840_p1, ap_CS_fsm_state5, zext_ln175_fu_820_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            test_set_V_address0 <= zext_ln184_fu_840_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            test_set_V_address0 <= zext_ln175_fu_820_p1(11 - 1 downto 0);
        else 
            test_set_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    test_set_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            test_set_V_ce0 <= ap_const_logic_1;
        else 
            test_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_set_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            test_set_V_we0 <= ap_const_logic_1;
        else 
            test_set_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1226_p4 <= pos_0_i_reg_633(31 downto 2);
    tmp_7_fu_765_p1 <= num_training;
    tmp_7_fu_765_p3 <= tmp_7_fu_765_p1(31 downto 31);
    tmp_8_fu_772_p4 <= sub_ln178_fu_759_p2(64 downto 36);
    tmp_9_fu_782_p4 <= mul_ln178_fu_753_p2(64 downto 36);

    training_set_V_address0_assign_proc : process(zext_ln168_reg_1484, ap_CS_fsm_state10, ap_CS_fsm_state3, zext_ln199_fu_903_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            training_set_V_address0 <= zext_ln199_fu_903_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_set_V_address0 <= zext_ln168_reg_1484(15 - 1 downto 0);
        else 
            training_set_V_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_set_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            training_set_V_ce0 <= ap_const_logic_1;
        else 
            training_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_set_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_set_V_we0 <= ap_const_logic_1;
        else 
            training_set_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln108_fu_1318_p1 <= array3_q1(6 - 1 downto 0);
    trunc_ln110_fu_1206_p1 <= pos_0_i_reg_633(6 - 1 downto 0);
    trunc_ln120_fu_1365_p1 <= array3_q0(6 - 1 downto 0);
    trunc_ln129_fu_1410_p1 <= max_vote_reg_667(6 - 1 downto 0);
    trunc_ln321_fu_735_p1 <= i1_0_reg_452(16 - 1 downto 0);
    trunc_ln51_fu_1003_p1 <= max_dist_id_0_i_reg_555(6 - 1 downto 0);
    xor_ln107_fu_1285_p2 <= (r3_0_i_reg_645 xor ap_const_lv2_2);
    zext_ln100_1_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_i_reg_622),64));
    zext_ln100_2_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_1124_p3),7));
    zext_ln100_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln100_fu_1167_p1),64));
    zext_ln106_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_fu_1263_p2),32));
    zext_ln107_1_fu_1315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_reg_1732),3));
    zext_ln107_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_reg_1732),64));
    zext_ln108_1_fu_1306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln108_fu_1300_p2),64));
    zext_ln108_2_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln108_1_fu_1322_p2),64));
    zext_ln108_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln108_fu_1318_p1),32));
    zext_ln110_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_0_i_reg_633),64));
    zext_ln111_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_i_reg_600),32));
    zext_ln120_1_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln120_1_fu_1354_p2),64));
    zext_ln120_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_i_reg_656),3));
    zext_ln129_fu_1405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln129_fu_1399_p2),64));
    zext_ln1357_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_509),6));
    zext_ln168_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_441),64));
    zext_ln172_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_452),32));
    zext_ln175_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_452),64));
    zext_ln181_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_0_reg_464),32));
    zext_ln184_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_0_reg_464),64));
    zext_ln18_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_947_p3),9));
    zext_ln190_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_475),64));
    zext_ln193_1_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_486),29));
    zext_ln193_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_486),15));
    zext_ln199_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln199_fu_898_p2),64));
    zext_ln215_fu_1443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_692),32));
    zext_ln218_fu_1458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_692),64));
    zext_ln35_1_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_reg_532),32));
    zext_ln35_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dist_reg_520),32));
    zext_ln43_1_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_988_p2),64));
    zext_ln43_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_dist_id_reg_567),6));
    zext_ln45_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_dist_id_reg_567),32));
    zext_ln51_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dist_reg_520),11));
    zext_ln83_1_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_578),3));
    zext_ln83_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_578),64));
    zext_ln84_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_1074_p2),64));
    zext_ln89_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_fu_1097_p2),64));
    zext_ln94_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_i_reg_600),7));
    zext_ln95_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_611),7));
    zext_ln98_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_i_reg_622),32));
end behav;
